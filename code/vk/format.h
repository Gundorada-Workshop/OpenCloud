#include <volk/volk.h>
#include <string_view>
#include "common/dictionary.h"
#include "common/strings.h"

// Generated by generators/gen_vk_formatters.rb
// Please do not edit without updating the script

// VkImageLayout
template<>
struct fmt::formatter<VkImageLayout> : formatter<string_view>
{
  auto format(VkImageLayout value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkImageLayout, std::string_view, 29> s_map =
    {
      { VK_IMAGE_LAYOUT_UNDEFINED, "VK_IMAGE_LAYOUT_UNDEFINED" },
      { VK_IMAGE_LAYOUT_GENERAL, "VK_IMAGE_LAYOUT_GENERAL" },
      { VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL" },
      { VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL" },
      { VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL" },
      { VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL" },
      { VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL" },
      { VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL" },
      { VK_IMAGE_LAYOUT_PREINITIALIZED, "VK_IMAGE_LAYOUT_PREINITIALIZED" },
      { VK_IMAGE_LAYOUT_PRESENT_SRC_KHR, "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR, "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR, "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR, "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR" },
      { VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR" },
      { VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV, "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV" },
      { VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT, "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT" },
      { VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR, "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR, "VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR" },
      { VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR, "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR" },
      { VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR, "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR" },
      { VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT, "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAttachmentLoadOp
template<>
struct fmt::formatter<VkAttachmentLoadOp> : formatter<string_view>
{
  auto format(VkAttachmentLoadOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAttachmentLoadOp, std::string_view, 4> s_map =
    {
      { VK_ATTACHMENT_LOAD_OP_LOAD, "VK_ATTACHMENT_LOAD_OP_LOAD" },
      { VK_ATTACHMENT_LOAD_OP_CLEAR, "VK_ATTACHMENT_LOAD_OP_CLEAR" },
      { VK_ATTACHMENT_LOAD_OP_DONT_CARE, "VK_ATTACHMENT_LOAD_OP_DONT_CARE" },
      { VK_ATTACHMENT_LOAD_OP_NONE_EXT, "VK_ATTACHMENT_LOAD_OP_NONE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAttachmentStoreOp
template<>
struct fmt::formatter<VkAttachmentStoreOp> : formatter<string_view>
{
  auto format(VkAttachmentStoreOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAttachmentStoreOp, std::string_view, 5> s_map =
    {
      { VK_ATTACHMENT_STORE_OP_STORE, "VK_ATTACHMENT_STORE_OP_STORE" },
      { VK_ATTACHMENT_STORE_OP_DONT_CARE, "VK_ATTACHMENT_STORE_OP_DONT_CARE" },
      { VK_ATTACHMENT_STORE_OP_NONE_KHR, "VK_ATTACHMENT_STORE_OP_NONE_KHR" },
      { VK_ATTACHMENT_STORE_OP_NONE_QCOM, "VK_ATTACHMENT_STORE_OP_NONE_QCOM" },
      { VK_ATTACHMENT_STORE_OP_NONE_EXT, "VK_ATTACHMENT_STORE_OP_NONE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkImageType
template<>
struct fmt::formatter<VkImageType> : formatter<string_view>
{
  auto format(VkImageType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkImageType, std::string_view, 3> s_map =
    {
      { VK_IMAGE_TYPE_1D, "VK_IMAGE_TYPE_1D" },
      { VK_IMAGE_TYPE_2D, "VK_IMAGE_TYPE_2D" },
      { VK_IMAGE_TYPE_3D, "VK_IMAGE_TYPE_3D" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkImageTiling
template<>
struct fmt::formatter<VkImageTiling> : formatter<string_view>
{
  auto format(VkImageTiling value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkImageTiling, std::string_view, 3> s_map =
    {
      { VK_IMAGE_TILING_OPTIMAL, "VK_IMAGE_TILING_OPTIMAL" },
      { VK_IMAGE_TILING_LINEAR, "VK_IMAGE_TILING_LINEAR" },
      { VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkImageViewType
template<>
struct fmt::formatter<VkImageViewType> : formatter<string_view>
{
  auto format(VkImageViewType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkImageViewType, std::string_view, 7> s_map =
    {
      { VK_IMAGE_VIEW_TYPE_1D, "VK_IMAGE_VIEW_TYPE_1D" },
      { VK_IMAGE_VIEW_TYPE_2D, "VK_IMAGE_VIEW_TYPE_2D" },
      { VK_IMAGE_VIEW_TYPE_3D, "VK_IMAGE_VIEW_TYPE_3D" },
      { VK_IMAGE_VIEW_TYPE_CUBE, "VK_IMAGE_VIEW_TYPE_CUBE" },
      { VK_IMAGE_VIEW_TYPE_1D_ARRAY, "VK_IMAGE_VIEW_TYPE_1D_ARRAY" },
      { VK_IMAGE_VIEW_TYPE_2D_ARRAY, "VK_IMAGE_VIEW_TYPE_2D_ARRAY" },
      { VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCommandBufferLevel
template<>
struct fmt::formatter<VkCommandBufferLevel> : formatter<string_view>
{
  auto format(VkCommandBufferLevel value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCommandBufferLevel, std::string_view, 2> s_map =
    {
      { VK_COMMAND_BUFFER_LEVEL_PRIMARY, "VK_COMMAND_BUFFER_LEVEL_PRIMARY" },
      { VK_COMMAND_BUFFER_LEVEL_SECONDARY, "VK_COMMAND_BUFFER_LEVEL_SECONDARY" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkComponentSwizzle
template<>
struct fmt::formatter<VkComponentSwizzle> : formatter<string_view>
{
  auto format(VkComponentSwizzle value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkComponentSwizzle, std::string_view, 7> s_map =
    {
      { VK_COMPONENT_SWIZZLE_IDENTITY, "VK_COMPONENT_SWIZZLE_IDENTITY" },
      { VK_COMPONENT_SWIZZLE_ZERO, "VK_COMPONENT_SWIZZLE_ZERO" },
      { VK_COMPONENT_SWIZZLE_ONE, "VK_COMPONENT_SWIZZLE_ONE" },
      { VK_COMPONENT_SWIZZLE_R, "VK_COMPONENT_SWIZZLE_R" },
      { VK_COMPONENT_SWIZZLE_G, "VK_COMPONENT_SWIZZLE_G" },
      { VK_COMPONENT_SWIZZLE_B, "VK_COMPONENT_SWIZZLE_B" },
      { VK_COMPONENT_SWIZZLE_A, "VK_COMPONENT_SWIZZLE_A" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDescriptorType
template<>
struct fmt::formatter<VkDescriptorType> : formatter<string_view>
{
  auto format(VkDescriptorType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDescriptorType, std::string_view, 18> s_map =
    {
      { VK_DESCRIPTOR_TYPE_SAMPLER, "VK_DESCRIPTOR_TYPE_SAMPLER" },
      { VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER" },
      { VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE" },
      { VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE" },
      { VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER" },
      { VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER" },
      { VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER" },
      { VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER" },
      { VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC" },
      { VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC" },
      { VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT" },
      { VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT" },
      { VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR" },
      { VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV, "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV" },
      { VK_DESCRIPTOR_TYPE_MUTABLE_VALVE, "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE" },
      { VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM, "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM" },
      { VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM, "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM" },
      { VK_DESCRIPTOR_TYPE_MUTABLE_EXT, "VK_DESCRIPTOR_TYPE_MUTABLE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkQueryType
template<>
struct fmt::formatter<VkQueryType> : formatter<string_view>
{
  auto format(VkQueryType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkQueryType, std::string_view, 17> s_map =
    {
      { VK_QUERY_TYPE_OCCLUSION, "VK_QUERY_TYPE_OCCLUSION" },
      { VK_QUERY_TYPE_PIPELINE_STATISTICS, "VK_QUERY_TYPE_PIPELINE_STATISTICS" },
      { VK_QUERY_TYPE_TIMESTAMP, "VK_QUERY_TYPE_TIMESTAMP" },
      { VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR, "VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR" },
      { VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT, "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT" },
      { VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR, "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR" },
      { VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR, "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR" },
      { VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR" },
      { VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV, "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV" },
      { VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL, "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL" },
      { VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR, "VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR" },
      { VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT, "VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT" },
      { VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT, "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT" },
      { VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR, "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR" },
      { VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR, "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR" },
      { VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT, "VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT" },
      { VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT, "VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBorderColor
template<>
struct fmt::formatter<VkBorderColor> : formatter<string_view>
{
  auto format(VkBorderColor value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBorderColor, std::string_view, 8> s_map =
    {
      { VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK, "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK" },
      { VK_BORDER_COLOR_INT_TRANSPARENT_BLACK, "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK" },
      { VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK, "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK" },
      { VK_BORDER_COLOR_INT_OPAQUE_BLACK, "VK_BORDER_COLOR_INT_OPAQUE_BLACK" },
      { VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE, "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE" },
      { VK_BORDER_COLOR_INT_OPAQUE_WHITE, "VK_BORDER_COLOR_INT_OPAQUE_WHITE" },
      { VK_BORDER_COLOR_FLOAT_CUSTOM_EXT, "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT" },
      { VK_BORDER_COLOR_INT_CUSTOM_EXT, "VK_BORDER_COLOR_INT_CUSTOM_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineBindPoint
template<>
struct fmt::formatter<VkPipelineBindPoint> : formatter<string_view>
{
  auto format(VkPipelineBindPoint value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineBindPoint, std::string_view, 6> s_map =
    {
      { VK_PIPELINE_BIND_POINT_GRAPHICS, "VK_PIPELINE_BIND_POINT_GRAPHICS" },
      { VK_PIPELINE_BIND_POINT_COMPUTE, "VK_PIPELINE_BIND_POINT_COMPUTE" },
      { VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX, "VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX" },
      { VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR, "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR" },
      { VK_PIPELINE_BIND_POINT_RAY_TRACING_NV, "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV" },
      { VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI, "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineCacheHeaderVersion
template<>
struct fmt::formatter<VkPipelineCacheHeaderVersion> : formatter<string_view>
{
  auto format(VkPipelineCacheHeaderVersion value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineCacheHeaderVersion, std::string_view, 1> s_map =
    {
      { VK_PIPELINE_CACHE_HEADER_VERSION_ONE, "VK_PIPELINE_CACHE_HEADER_VERSION_ONE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPrimitiveTopology
template<>
struct fmt::formatter<VkPrimitiveTopology> : formatter<string_view>
{
  auto format(VkPrimitiveTopology value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPrimitiveTopology, std::string_view, 11> s_map =
    {
      { VK_PRIMITIVE_TOPOLOGY_POINT_LIST, "VK_PRIMITIVE_TOPOLOGY_POINT_LIST" },
      { VK_PRIMITIVE_TOPOLOGY_LINE_LIST, "VK_PRIMITIVE_TOPOLOGY_LINE_LIST" },
      { VK_PRIMITIVE_TOPOLOGY_LINE_STRIP, "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP" },
      { VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST" },
      { VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP" },
      { VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN" },
      { VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY" },
      { VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY" },
      { VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY" },
      { VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY" },
      { VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSharingMode
template<>
struct fmt::formatter<VkSharingMode> : formatter<string_view>
{
  auto format(VkSharingMode value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSharingMode, std::string_view, 2> s_map =
    {
      { VK_SHARING_MODE_EXCLUSIVE, "VK_SHARING_MODE_EXCLUSIVE" },
      { VK_SHARING_MODE_CONCURRENT, "VK_SHARING_MODE_CONCURRENT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkIndexType
template<>
struct fmt::formatter<VkIndexType> : formatter<string_view>
{
  auto format(VkIndexType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkIndexType, std::string_view, 5> s_map =
    {
      { VK_INDEX_TYPE_UINT16, "VK_INDEX_TYPE_UINT16" },
      { VK_INDEX_TYPE_UINT32, "VK_INDEX_TYPE_UINT32" },
      { VK_INDEX_TYPE_NONE_KHR, "VK_INDEX_TYPE_NONE_KHR" },
      { VK_INDEX_TYPE_NONE_NV, "VK_INDEX_TYPE_NONE_NV" },
      { VK_INDEX_TYPE_UINT8_EXT, "VK_INDEX_TYPE_UINT8_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFilter
template<>
struct fmt::formatter<VkFilter> : formatter<string_view>
{
  auto format(VkFilter value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFilter, std::string_view, 4> s_map =
    {
      { VK_FILTER_NEAREST, "VK_FILTER_NEAREST" },
      { VK_FILTER_LINEAR, "VK_FILTER_LINEAR" },
      { VK_FILTER_CUBIC_IMG, "VK_FILTER_CUBIC_IMG" },
      { VK_FILTER_CUBIC_EXT, "VK_FILTER_CUBIC_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSamplerMipmapMode
template<>
struct fmt::formatter<VkSamplerMipmapMode> : formatter<string_view>
{
  auto format(VkSamplerMipmapMode value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSamplerMipmapMode, std::string_view, 2> s_map =
    {
      { VK_SAMPLER_MIPMAP_MODE_NEAREST, "VK_SAMPLER_MIPMAP_MODE_NEAREST" },
      { VK_SAMPLER_MIPMAP_MODE_LINEAR, "VK_SAMPLER_MIPMAP_MODE_LINEAR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSamplerAddressMode
template<>
struct fmt::formatter<VkSamplerAddressMode> : formatter<string_view>
{
  auto format(VkSamplerAddressMode value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSamplerAddressMode, std::string_view, 6> s_map =
    {
      { VK_SAMPLER_ADDRESS_MODE_REPEAT, "VK_SAMPLER_ADDRESS_MODE_REPEAT" },
      { VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT, "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT" },
      { VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE" },
      { VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER" },
      { VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE, "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE" },
      { VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR, "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCompareOp
template<>
struct fmt::formatter<VkCompareOp> : formatter<string_view>
{
  auto format(VkCompareOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCompareOp, std::string_view, 8> s_map =
    {
      { VK_COMPARE_OP_NEVER, "VK_COMPARE_OP_NEVER" },
      { VK_COMPARE_OP_LESS, "VK_COMPARE_OP_LESS" },
      { VK_COMPARE_OP_EQUAL, "VK_COMPARE_OP_EQUAL" },
      { VK_COMPARE_OP_LESS_OR_EQUAL, "VK_COMPARE_OP_LESS_OR_EQUAL" },
      { VK_COMPARE_OP_GREATER, "VK_COMPARE_OP_GREATER" },
      { VK_COMPARE_OP_NOT_EQUAL, "VK_COMPARE_OP_NOT_EQUAL" },
      { VK_COMPARE_OP_GREATER_OR_EQUAL, "VK_COMPARE_OP_GREATER_OR_EQUAL" },
      { VK_COMPARE_OP_ALWAYS, "VK_COMPARE_OP_ALWAYS" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPolygonMode
template<>
struct fmt::formatter<VkPolygonMode> : formatter<string_view>
{
  auto format(VkPolygonMode value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPolygonMode, std::string_view, 4> s_map =
    {
      { VK_POLYGON_MODE_FILL, "VK_POLYGON_MODE_FILL" },
      { VK_POLYGON_MODE_LINE, "VK_POLYGON_MODE_LINE" },
      { VK_POLYGON_MODE_POINT, "VK_POLYGON_MODE_POINT" },
      { VK_POLYGON_MODE_FILL_RECTANGLE_NV, "VK_POLYGON_MODE_FILL_RECTANGLE_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFrontFace
template<>
struct fmt::formatter<VkFrontFace> : formatter<string_view>
{
  auto format(VkFrontFace value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFrontFace, std::string_view, 2> s_map =
    {
      { VK_FRONT_FACE_COUNTER_CLOCKWISE, "VK_FRONT_FACE_COUNTER_CLOCKWISE" },
      { VK_FRONT_FACE_CLOCKWISE, "VK_FRONT_FACE_CLOCKWISE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBlendFactor
template<>
struct fmt::formatter<VkBlendFactor> : formatter<string_view>
{
  auto format(VkBlendFactor value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBlendFactor, std::string_view, 19> s_map =
    {
      { VK_BLEND_FACTOR_ZERO, "VK_BLEND_FACTOR_ZERO" },
      { VK_BLEND_FACTOR_ONE, "VK_BLEND_FACTOR_ONE" },
      { VK_BLEND_FACTOR_SRC_COLOR, "VK_BLEND_FACTOR_SRC_COLOR" },
      { VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR, "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR" },
      { VK_BLEND_FACTOR_DST_COLOR, "VK_BLEND_FACTOR_DST_COLOR" },
      { VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR, "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR" },
      { VK_BLEND_FACTOR_SRC_ALPHA, "VK_BLEND_FACTOR_SRC_ALPHA" },
      { VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA" },
      { VK_BLEND_FACTOR_DST_ALPHA, "VK_BLEND_FACTOR_DST_ALPHA" },
      { VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA, "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA" },
      { VK_BLEND_FACTOR_CONSTANT_COLOR, "VK_BLEND_FACTOR_CONSTANT_COLOR" },
      { VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR, "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR" },
      { VK_BLEND_FACTOR_CONSTANT_ALPHA, "VK_BLEND_FACTOR_CONSTANT_ALPHA" },
      { VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA, "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA" },
      { VK_BLEND_FACTOR_SRC_ALPHA_SATURATE, "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE" },
      { VK_BLEND_FACTOR_SRC1_COLOR, "VK_BLEND_FACTOR_SRC1_COLOR" },
      { VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR" },
      { VK_BLEND_FACTOR_SRC1_ALPHA, "VK_BLEND_FACTOR_SRC1_ALPHA" },
      { VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA, "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBlendOp
template<>
struct fmt::formatter<VkBlendOp> : formatter<string_view>
{
  auto format(VkBlendOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBlendOp, std::string_view, 51> s_map =
    {
      { VK_BLEND_OP_ADD, "VK_BLEND_OP_ADD" },
      { VK_BLEND_OP_SUBTRACT, "VK_BLEND_OP_SUBTRACT" },
      { VK_BLEND_OP_REVERSE_SUBTRACT, "VK_BLEND_OP_REVERSE_SUBTRACT" },
      { VK_BLEND_OP_MIN, "VK_BLEND_OP_MIN" },
      { VK_BLEND_OP_MAX, "VK_BLEND_OP_MAX" },
      { VK_BLEND_OP_ZERO_EXT, "VK_BLEND_OP_ZERO_EXT" },
      { VK_BLEND_OP_SRC_EXT, "VK_BLEND_OP_SRC_EXT" },
      { VK_BLEND_OP_DST_EXT, "VK_BLEND_OP_DST_EXT" },
      { VK_BLEND_OP_SRC_OVER_EXT, "VK_BLEND_OP_SRC_OVER_EXT" },
      { VK_BLEND_OP_DST_OVER_EXT, "VK_BLEND_OP_DST_OVER_EXT" },
      { VK_BLEND_OP_SRC_IN_EXT, "VK_BLEND_OP_SRC_IN_EXT" },
      { VK_BLEND_OP_DST_IN_EXT, "VK_BLEND_OP_DST_IN_EXT" },
      { VK_BLEND_OP_SRC_OUT_EXT, "VK_BLEND_OP_SRC_OUT_EXT" },
      { VK_BLEND_OP_DST_OUT_EXT, "VK_BLEND_OP_DST_OUT_EXT" },
      { VK_BLEND_OP_SRC_ATOP_EXT, "VK_BLEND_OP_SRC_ATOP_EXT" },
      { VK_BLEND_OP_DST_ATOP_EXT, "VK_BLEND_OP_DST_ATOP_EXT" },
      { VK_BLEND_OP_XOR_EXT, "VK_BLEND_OP_XOR_EXT" },
      { VK_BLEND_OP_MULTIPLY_EXT, "VK_BLEND_OP_MULTIPLY_EXT" },
      { VK_BLEND_OP_SCREEN_EXT, "VK_BLEND_OP_SCREEN_EXT" },
      { VK_BLEND_OP_OVERLAY_EXT, "VK_BLEND_OP_OVERLAY_EXT" },
      { VK_BLEND_OP_DARKEN_EXT, "VK_BLEND_OP_DARKEN_EXT" },
      { VK_BLEND_OP_LIGHTEN_EXT, "VK_BLEND_OP_LIGHTEN_EXT" },
      { VK_BLEND_OP_COLORDODGE_EXT, "VK_BLEND_OP_COLORDODGE_EXT" },
      { VK_BLEND_OP_COLORBURN_EXT, "VK_BLEND_OP_COLORBURN_EXT" },
      { VK_BLEND_OP_HARDLIGHT_EXT, "VK_BLEND_OP_HARDLIGHT_EXT" },
      { VK_BLEND_OP_SOFTLIGHT_EXT, "VK_BLEND_OP_SOFTLIGHT_EXT" },
      { VK_BLEND_OP_DIFFERENCE_EXT, "VK_BLEND_OP_DIFFERENCE_EXT" },
      { VK_BLEND_OP_EXCLUSION_EXT, "VK_BLEND_OP_EXCLUSION_EXT" },
      { VK_BLEND_OP_INVERT_EXT, "VK_BLEND_OP_INVERT_EXT" },
      { VK_BLEND_OP_INVERT_RGB_EXT, "VK_BLEND_OP_INVERT_RGB_EXT" },
      { VK_BLEND_OP_LINEARDODGE_EXT, "VK_BLEND_OP_LINEARDODGE_EXT" },
      { VK_BLEND_OP_LINEARBURN_EXT, "VK_BLEND_OP_LINEARBURN_EXT" },
      { VK_BLEND_OP_VIVIDLIGHT_EXT, "VK_BLEND_OP_VIVIDLIGHT_EXT" },
      { VK_BLEND_OP_LINEARLIGHT_EXT, "VK_BLEND_OP_LINEARLIGHT_EXT" },
      { VK_BLEND_OP_PINLIGHT_EXT, "VK_BLEND_OP_PINLIGHT_EXT" },
      { VK_BLEND_OP_HARDMIX_EXT, "VK_BLEND_OP_HARDMIX_EXT" },
      { VK_BLEND_OP_HSL_HUE_EXT, "VK_BLEND_OP_HSL_HUE_EXT" },
      { VK_BLEND_OP_HSL_SATURATION_EXT, "VK_BLEND_OP_HSL_SATURATION_EXT" },
      { VK_BLEND_OP_HSL_COLOR_EXT, "VK_BLEND_OP_HSL_COLOR_EXT" },
      { VK_BLEND_OP_HSL_LUMINOSITY_EXT, "VK_BLEND_OP_HSL_LUMINOSITY_EXT" },
      { VK_BLEND_OP_PLUS_EXT, "VK_BLEND_OP_PLUS_EXT" },
      { VK_BLEND_OP_PLUS_CLAMPED_EXT, "VK_BLEND_OP_PLUS_CLAMPED_EXT" },
      { VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT" },
      { VK_BLEND_OP_PLUS_DARKER_EXT, "VK_BLEND_OP_PLUS_DARKER_EXT" },
      { VK_BLEND_OP_MINUS_EXT, "VK_BLEND_OP_MINUS_EXT" },
      { VK_BLEND_OP_MINUS_CLAMPED_EXT, "VK_BLEND_OP_MINUS_CLAMPED_EXT" },
      { VK_BLEND_OP_CONTRAST_EXT, "VK_BLEND_OP_CONTRAST_EXT" },
      { VK_BLEND_OP_INVERT_OVG_EXT, "VK_BLEND_OP_INVERT_OVG_EXT" },
      { VK_BLEND_OP_RED_EXT, "VK_BLEND_OP_RED_EXT" },
      { VK_BLEND_OP_GREEN_EXT, "VK_BLEND_OP_GREEN_EXT" },
      { VK_BLEND_OP_BLUE_EXT, "VK_BLEND_OP_BLUE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkStencilOp
template<>
struct fmt::formatter<VkStencilOp> : formatter<string_view>
{
  auto format(VkStencilOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkStencilOp, std::string_view, 8> s_map =
    {
      { VK_STENCIL_OP_KEEP, "VK_STENCIL_OP_KEEP" },
      { VK_STENCIL_OP_ZERO, "VK_STENCIL_OP_ZERO" },
      { VK_STENCIL_OP_REPLACE, "VK_STENCIL_OP_REPLACE" },
      { VK_STENCIL_OP_INCREMENT_AND_CLAMP, "VK_STENCIL_OP_INCREMENT_AND_CLAMP" },
      { VK_STENCIL_OP_DECREMENT_AND_CLAMP, "VK_STENCIL_OP_DECREMENT_AND_CLAMP" },
      { VK_STENCIL_OP_INVERT, "VK_STENCIL_OP_INVERT" },
      { VK_STENCIL_OP_INCREMENT_AND_WRAP, "VK_STENCIL_OP_INCREMENT_AND_WRAP" },
      { VK_STENCIL_OP_DECREMENT_AND_WRAP, "VK_STENCIL_OP_DECREMENT_AND_WRAP" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkLogicOp
template<>
struct fmt::formatter<VkLogicOp> : formatter<string_view>
{
  auto format(VkLogicOp value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkLogicOp, std::string_view, 16> s_map =
    {
      { VK_LOGIC_OP_CLEAR, "VK_LOGIC_OP_CLEAR" },
      { VK_LOGIC_OP_AND, "VK_LOGIC_OP_AND" },
      { VK_LOGIC_OP_AND_REVERSE, "VK_LOGIC_OP_AND_REVERSE" },
      { VK_LOGIC_OP_COPY, "VK_LOGIC_OP_COPY" },
      { VK_LOGIC_OP_AND_INVERTED, "VK_LOGIC_OP_AND_INVERTED" },
      { VK_LOGIC_OP_NO_OP, "VK_LOGIC_OP_NO_OP" },
      { VK_LOGIC_OP_XOR, "VK_LOGIC_OP_XOR" },
      { VK_LOGIC_OP_OR, "VK_LOGIC_OP_OR" },
      { VK_LOGIC_OP_NOR, "VK_LOGIC_OP_NOR" },
      { VK_LOGIC_OP_EQUIVALENT, "VK_LOGIC_OP_EQUIVALENT" },
      { VK_LOGIC_OP_INVERT, "VK_LOGIC_OP_INVERT" },
      { VK_LOGIC_OP_OR_REVERSE, "VK_LOGIC_OP_OR_REVERSE" },
      { VK_LOGIC_OP_COPY_INVERTED, "VK_LOGIC_OP_COPY_INVERTED" },
      { VK_LOGIC_OP_OR_INVERTED, "VK_LOGIC_OP_OR_INVERTED" },
      { VK_LOGIC_OP_NAND, "VK_LOGIC_OP_NAND" },
      { VK_LOGIC_OP_SET, "VK_LOGIC_OP_SET" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkInternalAllocationType
template<>
struct fmt::formatter<VkInternalAllocationType> : formatter<string_view>
{
  auto format(VkInternalAllocationType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkInternalAllocationType, std::string_view, 1> s_map =
    {
      { VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE, "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSystemAllocationScope
template<>
struct fmt::formatter<VkSystemAllocationScope> : formatter<string_view>
{
  auto format(VkSystemAllocationScope value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSystemAllocationScope, std::string_view, 5> s_map =
    {
      { VK_SYSTEM_ALLOCATION_SCOPE_COMMAND, "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND" },
      { VK_SYSTEM_ALLOCATION_SCOPE_OBJECT, "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT" },
      { VK_SYSTEM_ALLOCATION_SCOPE_CACHE, "VK_SYSTEM_ALLOCATION_SCOPE_CACHE" },
      { VK_SYSTEM_ALLOCATION_SCOPE_DEVICE, "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE" },
      { VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE, "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPhysicalDeviceType
template<>
struct fmt::formatter<VkPhysicalDeviceType> : formatter<string_view>
{
  auto format(VkPhysicalDeviceType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPhysicalDeviceType, std::string_view, 5> s_map =
    {
      { VK_PHYSICAL_DEVICE_TYPE_OTHER, "VK_PHYSICAL_DEVICE_TYPE_OTHER" },
      { VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU, "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU" },
      { VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU, "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU" },
      { VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU, "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU" },
      { VK_PHYSICAL_DEVICE_TYPE_CPU, "VK_PHYSICAL_DEVICE_TYPE_CPU" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkVertexInputRate
template<>
struct fmt::formatter<VkVertexInputRate> : formatter<string_view>
{
  auto format(VkVertexInputRate value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkVertexInputRate, std::string_view, 2> s_map =
    {
      { VK_VERTEX_INPUT_RATE_VERTEX, "VK_VERTEX_INPUT_RATE_VERTEX" },
      { VK_VERTEX_INPUT_RATE_INSTANCE, "VK_VERTEX_INPUT_RATE_INSTANCE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFormat
template<>
struct fmt::formatter<VkFormat> : formatter<string_view>
{
  auto format(VkFormat value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFormat, std::string_view, 280> s_map =
    {
      { VK_FORMAT_UNDEFINED, "VK_FORMAT_UNDEFINED" },
      { VK_FORMAT_R4G4_UNORM_PACK8, "VK_FORMAT_R4G4_UNORM_PACK8" },
      { VK_FORMAT_R4G4B4A4_UNORM_PACK16, "VK_FORMAT_R4G4B4A4_UNORM_PACK16" },
      { VK_FORMAT_B4G4R4A4_UNORM_PACK16, "VK_FORMAT_B4G4R4A4_UNORM_PACK16" },
      { VK_FORMAT_R5G6B5_UNORM_PACK16, "VK_FORMAT_R5G6B5_UNORM_PACK16" },
      { VK_FORMAT_B5G6R5_UNORM_PACK16, "VK_FORMAT_B5G6R5_UNORM_PACK16" },
      { VK_FORMAT_R5G5B5A1_UNORM_PACK16, "VK_FORMAT_R5G5B5A1_UNORM_PACK16" },
      { VK_FORMAT_B5G5R5A1_UNORM_PACK16, "VK_FORMAT_B5G5R5A1_UNORM_PACK16" },
      { VK_FORMAT_A1R5G5B5_UNORM_PACK16, "VK_FORMAT_A1R5G5B5_UNORM_PACK16" },
      { VK_FORMAT_R8_UNORM, "VK_FORMAT_R8_UNORM" },
      { VK_FORMAT_R8_SNORM, "VK_FORMAT_R8_SNORM" },
      { VK_FORMAT_R8_USCALED, "VK_FORMAT_R8_USCALED" },
      { VK_FORMAT_R8_SSCALED, "VK_FORMAT_R8_SSCALED" },
      { VK_FORMAT_R8_UINT, "VK_FORMAT_R8_UINT" },
      { VK_FORMAT_R8_SINT, "VK_FORMAT_R8_SINT" },
      { VK_FORMAT_R8_SRGB, "VK_FORMAT_R8_SRGB" },
      { VK_FORMAT_R8G8_UNORM, "VK_FORMAT_R8G8_UNORM" },
      { VK_FORMAT_R8G8_SNORM, "VK_FORMAT_R8G8_SNORM" },
      { VK_FORMAT_R8G8_USCALED, "VK_FORMAT_R8G8_USCALED" },
      { VK_FORMAT_R8G8_SSCALED, "VK_FORMAT_R8G8_SSCALED" },
      { VK_FORMAT_R8G8_UINT, "VK_FORMAT_R8G8_UINT" },
      { VK_FORMAT_R8G8_SINT, "VK_FORMAT_R8G8_SINT" },
      { VK_FORMAT_R8G8_SRGB, "VK_FORMAT_R8G8_SRGB" },
      { VK_FORMAT_R8G8B8_UNORM, "VK_FORMAT_R8G8B8_UNORM" },
      { VK_FORMAT_R8G8B8_SNORM, "VK_FORMAT_R8G8B8_SNORM" },
      { VK_FORMAT_R8G8B8_USCALED, "VK_FORMAT_R8G8B8_USCALED" },
      { VK_FORMAT_R8G8B8_SSCALED, "VK_FORMAT_R8G8B8_SSCALED" },
      { VK_FORMAT_R8G8B8_UINT, "VK_FORMAT_R8G8B8_UINT" },
      { VK_FORMAT_R8G8B8_SINT, "VK_FORMAT_R8G8B8_SINT" },
      { VK_FORMAT_R8G8B8_SRGB, "VK_FORMAT_R8G8B8_SRGB" },
      { VK_FORMAT_B8G8R8_UNORM, "VK_FORMAT_B8G8R8_UNORM" },
      { VK_FORMAT_B8G8R8_SNORM, "VK_FORMAT_B8G8R8_SNORM" },
      { VK_FORMAT_B8G8R8_USCALED, "VK_FORMAT_B8G8R8_USCALED" },
      { VK_FORMAT_B8G8R8_SSCALED, "VK_FORMAT_B8G8R8_SSCALED" },
      { VK_FORMAT_B8G8R8_UINT, "VK_FORMAT_B8G8R8_UINT" },
      { VK_FORMAT_B8G8R8_SINT, "VK_FORMAT_B8G8R8_SINT" },
      { VK_FORMAT_B8G8R8_SRGB, "VK_FORMAT_B8G8R8_SRGB" },
      { VK_FORMAT_R8G8B8A8_UNORM, "VK_FORMAT_R8G8B8A8_UNORM" },
      { VK_FORMAT_R8G8B8A8_SNORM, "VK_FORMAT_R8G8B8A8_SNORM" },
      { VK_FORMAT_R8G8B8A8_USCALED, "VK_FORMAT_R8G8B8A8_USCALED" },
      { VK_FORMAT_R8G8B8A8_SSCALED, "VK_FORMAT_R8G8B8A8_SSCALED" },
      { VK_FORMAT_R8G8B8A8_UINT, "VK_FORMAT_R8G8B8A8_UINT" },
      { VK_FORMAT_R8G8B8A8_SINT, "VK_FORMAT_R8G8B8A8_SINT" },
      { VK_FORMAT_R8G8B8A8_SRGB, "VK_FORMAT_R8G8B8A8_SRGB" },
      { VK_FORMAT_B8G8R8A8_UNORM, "VK_FORMAT_B8G8R8A8_UNORM" },
      { VK_FORMAT_B8G8R8A8_SNORM, "VK_FORMAT_B8G8R8A8_SNORM" },
      { VK_FORMAT_B8G8R8A8_USCALED, "VK_FORMAT_B8G8R8A8_USCALED" },
      { VK_FORMAT_B8G8R8A8_SSCALED, "VK_FORMAT_B8G8R8A8_SSCALED" },
      { VK_FORMAT_B8G8R8A8_UINT, "VK_FORMAT_B8G8R8A8_UINT" },
      { VK_FORMAT_B8G8R8A8_SINT, "VK_FORMAT_B8G8R8A8_SINT" },
      { VK_FORMAT_B8G8R8A8_SRGB, "VK_FORMAT_B8G8R8A8_SRGB" },
      { VK_FORMAT_A8B8G8R8_UNORM_PACK32, "VK_FORMAT_A8B8G8R8_UNORM_PACK32" },
      { VK_FORMAT_A8B8G8R8_SNORM_PACK32, "VK_FORMAT_A8B8G8R8_SNORM_PACK32" },
      { VK_FORMAT_A8B8G8R8_USCALED_PACK32, "VK_FORMAT_A8B8G8R8_USCALED_PACK32" },
      { VK_FORMAT_A8B8G8R8_SSCALED_PACK32, "VK_FORMAT_A8B8G8R8_SSCALED_PACK32" },
      { VK_FORMAT_A8B8G8R8_UINT_PACK32, "VK_FORMAT_A8B8G8R8_UINT_PACK32" },
      { VK_FORMAT_A8B8G8R8_SINT_PACK32, "VK_FORMAT_A8B8G8R8_SINT_PACK32" },
      { VK_FORMAT_A8B8G8R8_SRGB_PACK32, "VK_FORMAT_A8B8G8R8_SRGB_PACK32" },
      { VK_FORMAT_A2R10G10B10_UNORM_PACK32, "VK_FORMAT_A2R10G10B10_UNORM_PACK32" },
      { VK_FORMAT_A2R10G10B10_SNORM_PACK32, "VK_FORMAT_A2R10G10B10_SNORM_PACK32" },
      { VK_FORMAT_A2R10G10B10_USCALED_PACK32, "VK_FORMAT_A2R10G10B10_USCALED_PACK32" },
      { VK_FORMAT_A2R10G10B10_SSCALED_PACK32, "VK_FORMAT_A2R10G10B10_SSCALED_PACK32" },
      { VK_FORMAT_A2R10G10B10_UINT_PACK32, "VK_FORMAT_A2R10G10B10_UINT_PACK32" },
      { VK_FORMAT_A2R10G10B10_SINT_PACK32, "VK_FORMAT_A2R10G10B10_SINT_PACK32" },
      { VK_FORMAT_A2B10G10R10_UNORM_PACK32, "VK_FORMAT_A2B10G10R10_UNORM_PACK32" },
      { VK_FORMAT_A2B10G10R10_SNORM_PACK32, "VK_FORMAT_A2B10G10R10_SNORM_PACK32" },
      { VK_FORMAT_A2B10G10R10_USCALED_PACK32, "VK_FORMAT_A2B10G10R10_USCALED_PACK32" },
      { VK_FORMAT_A2B10G10R10_SSCALED_PACK32, "VK_FORMAT_A2B10G10R10_SSCALED_PACK32" },
      { VK_FORMAT_A2B10G10R10_UINT_PACK32, "VK_FORMAT_A2B10G10R10_UINT_PACK32" },
      { VK_FORMAT_A2B10G10R10_SINT_PACK32, "VK_FORMAT_A2B10G10R10_SINT_PACK32" },
      { VK_FORMAT_R16_UNORM, "VK_FORMAT_R16_UNORM" },
      { VK_FORMAT_R16_SNORM, "VK_FORMAT_R16_SNORM" },
      { VK_FORMAT_R16_USCALED, "VK_FORMAT_R16_USCALED" },
      { VK_FORMAT_R16_SSCALED, "VK_FORMAT_R16_SSCALED" },
      { VK_FORMAT_R16_UINT, "VK_FORMAT_R16_UINT" },
      { VK_FORMAT_R16_SINT, "VK_FORMAT_R16_SINT" },
      { VK_FORMAT_R16_SFLOAT, "VK_FORMAT_R16_SFLOAT" },
      { VK_FORMAT_R16G16_UNORM, "VK_FORMAT_R16G16_UNORM" },
      { VK_FORMAT_R16G16_SNORM, "VK_FORMAT_R16G16_SNORM" },
      { VK_FORMAT_R16G16_USCALED, "VK_FORMAT_R16G16_USCALED" },
      { VK_FORMAT_R16G16_SSCALED, "VK_FORMAT_R16G16_SSCALED" },
      { VK_FORMAT_R16G16_UINT, "VK_FORMAT_R16G16_UINT" },
      { VK_FORMAT_R16G16_SINT, "VK_FORMAT_R16G16_SINT" },
      { VK_FORMAT_R16G16_SFLOAT, "VK_FORMAT_R16G16_SFLOAT" },
      { VK_FORMAT_R16G16B16_UNORM, "VK_FORMAT_R16G16B16_UNORM" },
      { VK_FORMAT_R16G16B16_SNORM, "VK_FORMAT_R16G16B16_SNORM" },
      { VK_FORMAT_R16G16B16_USCALED, "VK_FORMAT_R16G16B16_USCALED" },
      { VK_FORMAT_R16G16B16_SSCALED, "VK_FORMAT_R16G16B16_SSCALED" },
      { VK_FORMAT_R16G16B16_UINT, "VK_FORMAT_R16G16B16_UINT" },
      { VK_FORMAT_R16G16B16_SINT, "VK_FORMAT_R16G16B16_SINT" },
      { VK_FORMAT_R16G16B16_SFLOAT, "VK_FORMAT_R16G16B16_SFLOAT" },
      { VK_FORMAT_R16G16B16A16_UNORM, "VK_FORMAT_R16G16B16A16_UNORM" },
      { VK_FORMAT_R16G16B16A16_SNORM, "VK_FORMAT_R16G16B16A16_SNORM" },
      { VK_FORMAT_R16G16B16A16_USCALED, "VK_FORMAT_R16G16B16A16_USCALED" },
      { VK_FORMAT_R16G16B16A16_SSCALED, "VK_FORMAT_R16G16B16A16_SSCALED" },
      { VK_FORMAT_R16G16B16A16_UINT, "VK_FORMAT_R16G16B16A16_UINT" },
      { VK_FORMAT_R16G16B16A16_SINT, "VK_FORMAT_R16G16B16A16_SINT" },
      { VK_FORMAT_R16G16B16A16_SFLOAT, "VK_FORMAT_R16G16B16A16_SFLOAT" },
      { VK_FORMAT_R32_UINT, "VK_FORMAT_R32_UINT" },
      { VK_FORMAT_R32_SINT, "VK_FORMAT_R32_SINT" },
      { VK_FORMAT_R32_SFLOAT, "VK_FORMAT_R32_SFLOAT" },
      { VK_FORMAT_R32G32_UINT, "VK_FORMAT_R32G32_UINT" },
      { VK_FORMAT_R32G32_SINT, "VK_FORMAT_R32G32_SINT" },
      { VK_FORMAT_R32G32_SFLOAT, "VK_FORMAT_R32G32_SFLOAT" },
      { VK_FORMAT_R32G32B32_UINT, "VK_FORMAT_R32G32B32_UINT" },
      { VK_FORMAT_R32G32B32_SINT, "VK_FORMAT_R32G32B32_SINT" },
      { VK_FORMAT_R32G32B32_SFLOAT, "VK_FORMAT_R32G32B32_SFLOAT" },
      { VK_FORMAT_R32G32B32A32_UINT, "VK_FORMAT_R32G32B32A32_UINT" },
      { VK_FORMAT_R32G32B32A32_SINT, "VK_FORMAT_R32G32B32A32_SINT" },
      { VK_FORMAT_R32G32B32A32_SFLOAT, "VK_FORMAT_R32G32B32A32_SFLOAT" },
      { VK_FORMAT_R64_UINT, "VK_FORMAT_R64_UINT" },
      { VK_FORMAT_R64_SINT, "VK_FORMAT_R64_SINT" },
      { VK_FORMAT_R64_SFLOAT, "VK_FORMAT_R64_SFLOAT" },
      { VK_FORMAT_R64G64_UINT, "VK_FORMAT_R64G64_UINT" },
      { VK_FORMAT_R64G64_SINT, "VK_FORMAT_R64G64_SINT" },
      { VK_FORMAT_R64G64_SFLOAT, "VK_FORMAT_R64G64_SFLOAT" },
      { VK_FORMAT_R64G64B64_UINT, "VK_FORMAT_R64G64B64_UINT" },
      { VK_FORMAT_R64G64B64_SINT, "VK_FORMAT_R64G64B64_SINT" },
      { VK_FORMAT_R64G64B64_SFLOAT, "VK_FORMAT_R64G64B64_SFLOAT" },
      { VK_FORMAT_R64G64B64A64_UINT, "VK_FORMAT_R64G64B64A64_UINT" },
      { VK_FORMAT_R64G64B64A64_SINT, "VK_FORMAT_R64G64B64A64_SINT" },
      { VK_FORMAT_R64G64B64A64_SFLOAT, "VK_FORMAT_R64G64B64A64_SFLOAT" },
      { VK_FORMAT_B10G11R11_UFLOAT_PACK32, "VK_FORMAT_B10G11R11_UFLOAT_PACK32" },
      { VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32" },
      { VK_FORMAT_D16_UNORM, "VK_FORMAT_D16_UNORM" },
      { VK_FORMAT_X8_D24_UNORM_PACK32, "VK_FORMAT_X8_D24_UNORM_PACK32" },
      { VK_FORMAT_D32_SFLOAT, "VK_FORMAT_D32_SFLOAT" },
      { VK_FORMAT_S8_UINT, "VK_FORMAT_S8_UINT" },
      { VK_FORMAT_D16_UNORM_S8_UINT, "VK_FORMAT_D16_UNORM_S8_UINT" },
      { VK_FORMAT_D24_UNORM_S8_UINT, "VK_FORMAT_D24_UNORM_S8_UINT" },
      { VK_FORMAT_D32_SFLOAT_S8_UINT, "VK_FORMAT_D32_SFLOAT_S8_UINT" },
      { VK_FORMAT_BC1_RGB_UNORM_BLOCK, "VK_FORMAT_BC1_RGB_UNORM_BLOCK" },
      { VK_FORMAT_BC1_RGB_SRGB_BLOCK, "VK_FORMAT_BC1_RGB_SRGB_BLOCK" },
      { VK_FORMAT_BC1_RGBA_UNORM_BLOCK, "VK_FORMAT_BC1_RGBA_UNORM_BLOCK" },
      { VK_FORMAT_BC1_RGBA_SRGB_BLOCK, "VK_FORMAT_BC1_RGBA_SRGB_BLOCK" },
      { VK_FORMAT_BC2_UNORM_BLOCK, "VK_FORMAT_BC2_UNORM_BLOCK" },
      { VK_FORMAT_BC2_SRGB_BLOCK, "VK_FORMAT_BC2_SRGB_BLOCK" },
      { VK_FORMAT_BC3_UNORM_BLOCK, "VK_FORMAT_BC3_UNORM_BLOCK" },
      { VK_FORMAT_BC3_SRGB_BLOCK, "VK_FORMAT_BC3_SRGB_BLOCK" },
      { VK_FORMAT_BC4_UNORM_BLOCK, "VK_FORMAT_BC4_UNORM_BLOCK" },
      { VK_FORMAT_BC4_SNORM_BLOCK, "VK_FORMAT_BC4_SNORM_BLOCK" },
      { VK_FORMAT_BC5_UNORM_BLOCK, "VK_FORMAT_BC5_UNORM_BLOCK" },
      { VK_FORMAT_BC5_SNORM_BLOCK, "VK_FORMAT_BC5_SNORM_BLOCK" },
      { VK_FORMAT_BC6H_UFLOAT_BLOCK, "VK_FORMAT_BC6H_UFLOAT_BLOCK" },
      { VK_FORMAT_BC6H_SFLOAT_BLOCK, "VK_FORMAT_BC6H_SFLOAT_BLOCK" },
      { VK_FORMAT_BC7_UNORM_BLOCK, "VK_FORMAT_BC7_UNORM_BLOCK" },
      { VK_FORMAT_BC7_SRGB_BLOCK, "VK_FORMAT_BC7_SRGB_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK" },
      { VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK" },
      { VK_FORMAT_EAC_R11_UNORM_BLOCK, "VK_FORMAT_EAC_R11_UNORM_BLOCK" },
      { VK_FORMAT_EAC_R11_SNORM_BLOCK, "VK_FORMAT_EAC_R11_SNORM_BLOCK" },
      { VK_FORMAT_EAC_R11G11_UNORM_BLOCK, "VK_FORMAT_EAC_R11G11_UNORM_BLOCK" },
      { VK_FORMAT_EAC_R11G11_SNORM_BLOCK, "VK_FORMAT_EAC_R11G11_SNORM_BLOCK" },
      { VK_FORMAT_ASTC_4x4_UNORM_BLOCK, "VK_FORMAT_ASTC_4x4_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_4x4_SRGB_BLOCK, "VK_FORMAT_ASTC_4x4_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_5x4_UNORM_BLOCK, "VK_FORMAT_ASTC_5x4_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_5x4_SRGB_BLOCK, "VK_FORMAT_ASTC_5x4_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_5x5_UNORM_BLOCK, "VK_FORMAT_ASTC_5x5_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_5x5_SRGB_BLOCK, "VK_FORMAT_ASTC_5x5_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_6x5_UNORM_BLOCK, "VK_FORMAT_ASTC_6x5_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_6x5_SRGB_BLOCK, "VK_FORMAT_ASTC_6x5_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_6x6_UNORM_BLOCK, "VK_FORMAT_ASTC_6x6_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_6x6_SRGB_BLOCK, "VK_FORMAT_ASTC_6x6_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_8x5_UNORM_BLOCK, "VK_FORMAT_ASTC_8x5_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_8x5_SRGB_BLOCK, "VK_FORMAT_ASTC_8x5_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_8x6_UNORM_BLOCK, "VK_FORMAT_ASTC_8x6_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_8x6_SRGB_BLOCK, "VK_FORMAT_ASTC_8x6_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_8x8_UNORM_BLOCK, "VK_FORMAT_ASTC_8x8_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_8x8_SRGB_BLOCK, "VK_FORMAT_ASTC_8x8_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_10x5_UNORM_BLOCK, "VK_FORMAT_ASTC_10x5_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_10x5_SRGB_BLOCK, "VK_FORMAT_ASTC_10x5_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_10x6_UNORM_BLOCK, "VK_FORMAT_ASTC_10x6_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_10x6_SRGB_BLOCK, "VK_FORMAT_ASTC_10x6_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_10x8_UNORM_BLOCK, "VK_FORMAT_ASTC_10x8_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_10x8_SRGB_BLOCK, "VK_FORMAT_ASTC_10x8_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_10x10_UNORM_BLOCK, "VK_FORMAT_ASTC_10x10_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_10x10_SRGB_BLOCK, "VK_FORMAT_ASTC_10x10_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_12x10_UNORM_BLOCK, "VK_FORMAT_ASTC_12x10_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_12x10_SRGB_BLOCK, "VK_FORMAT_ASTC_12x10_SRGB_BLOCK" },
      { VK_FORMAT_ASTC_12x12_UNORM_BLOCK, "VK_FORMAT_ASTC_12x12_UNORM_BLOCK" },
      { VK_FORMAT_ASTC_12x12_SRGB_BLOCK, "VK_FORMAT_ASTC_12x12_SRGB_BLOCK" },
      { VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG" },
      { VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG" },
      { VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG" },
      { VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG" },
      { VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG" },
      { VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG" },
      { VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG" },
      { VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG" },
      { VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_G8B8G8R8_422_UNORM_KHR, "VK_FORMAT_G8B8G8R8_422_UNORM_KHR" },
      { VK_FORMAT_B8G8R8G8_422_UNORM_KHR, "VK_FORMAT_B8G8R8G8_422_UNORM_KHR" },
      { VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR" },
      { VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR, "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR" },
      { VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR" },
      { VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR, "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR" },
      { VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR" },
      { VK_FORMAT_R10X6_UNORM_PACK16_KHR, "VK_FORMAT_R10X6_UNORM_PACK16_KHR" },
      { VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR, "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR" },
      { VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR, "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR" },
      { VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR, "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR" },
      { VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR, "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR" },
      { VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR" },
      { VK_FORMAT_R12X4_UNORM_PACK16_KHR, "VK_FORMAT_R12X4_UNORM_PACK16_KHR" },
      { VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR, "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR" },
      { VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR, "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR" },
      { VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR, "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR" },
      { VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR, "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR" },
      { VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR" },
      { VK_FORMAT_G16B16G16R16_422_UNORM_KHR, "VK_FORMAT_G16B16G16R16_422_UNORM_KHR" },
      { VK_FORMAT_B16G16R16G16_422_UNORM_KHR, "VK_FORMAT_B16G16R16G16_422_UNORM_KHR" },
      { VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR" },
      { VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR, "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR" },
      { VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR" },
      { VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR, "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR" },
      { VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR" },
      { VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT" },
      { VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT, "VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT" },
      { VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT, "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT" },
      { VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT" },
      { VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT" },
      { VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT, "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT" },
      { VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT" },
      { VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT" },
      { VK_FORMAT_R16G16_S10_5_NV, "VK_FORMAT_R16G16_S10_5_NV" },
      { VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR, "VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR" },
      { VK_FORMAT_A8_UNORM_KHR, "VK_FORMAT_A8_UNORM_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkStructureType
template<>
struct fmt::formatter<VkStructureType> : formatter<string_view>
{
  auto format(VkStructureType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkStructureType, std::string_view, 864> s_map =
    {
      { VK_STRUCTURE_TYPE_APPLICATION_INFO, "VK_STRUCTURE_TYPE_APPLICATION_INFO" },
      { VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_SUBMIT_INFO, "VK_STRUCTURE_TYPE_SUBMIT_INFO" },
      { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO" },
      { VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE" },
      { VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO" },
      { VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO" },
      { VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET" },
      { VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET" },
      { VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO" },
      { VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER" },
      { VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER" },
      { VK_STRUCTURE_TYPE_MEMORY_BARRIER, "VK_STRUCTURE_TYPE_MEMORY_BARRIER" },
      { VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO, "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO, "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID, "VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID, "VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID" },
      { VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD" },
      { VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR, "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR" },
      { VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX, "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX" },
      { VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX, "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX" },
      { VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX, "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD" },
      { VK_STRUCTURE_TYPE_RENDERING_INFO_KHR, "VK_STRUCTURE_TYPE_RENDERING_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR, "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD, "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV, "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV" },
      { VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX, "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX" },
      { VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PRIVATE_VENDOR_INFO_RESERVED_OFFSET_0_NV, "VK_STRUCTURE_TYPE_PRIVATE_VENDOR_INFO_RESERVED_OFFSET_0_NV" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV" },
      { VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT" },
      { VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT, "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT" },
      { VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_HDR_METADATA_EXT, "VK_STRUCTURE_TYPE_HDR_METADATA_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR, "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR, "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR, "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR, "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR" },
      { VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR, "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR" },
      { VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR, "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR, "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR, "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR, "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR, "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR" },
      { VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR" },
      { VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK" },
      { VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK" },
      { VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR, "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT" },
      { VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID, "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID" },
      { VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID, "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID" },
      { VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID, "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID" },
      { VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID" },
      { VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID" },
      { VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID, "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX" },
      { VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX, "VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX" },
      { VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX, "VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX" },
      { VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX, "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR, "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR, "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR" },
      { VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR, "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR" },
      { VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR, "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR, "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR, "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT" },
      { VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_GEOMETRY_NV, "VK_STRUCTURE_TYPE_GEOMETRY_NV" },
      { VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV" },
      { VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV" },
      { VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV" },
      { VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD" },
      { VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP" },
      { VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR, "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV, "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL" },
      { VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL, "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD" },
      { VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR, "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR" },
      { VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR, "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT, "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT" },
      { VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT" },
      { VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR, "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT, "VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT, "VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT" },
      { VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT" },
      { VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT, "VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT" },
      { VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT, "VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT" },
      { VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT, "VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT" },
      { VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR" },
      { VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR, "VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT, "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT, "VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT" },
      { VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT, "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT, "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT, "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT, "VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV" },
      { VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV" },
      { VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT, "VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT, "VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV, "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV" },
      { VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PRESENT_ID_KHR, "VK_STRUCTURE_TYPE_PRESENT_ID_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR" },
      { VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR, "VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR, "VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR" },
      { VK_STRUCTURE_TYPE_RESERVED_QCOM, "VK_STRUCTURE_TYPE_RESERVED_QCOM" },
      { VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV, "VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT, "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT, "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT, "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT, "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT, "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR" },
      { VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV" },
      { VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT" },
      { VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT" },
      { VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT, "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT, "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT" },
      { VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT, "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT, "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT, "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT, "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE" },
      { VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT" },
      { VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT, "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR, "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA, "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA, "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA" },
      { VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA, "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA" },
      { VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI, "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV, "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT, "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV, "VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV" },
      { VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV, "VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV" },
      { VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV, "VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV" },
      { VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV, "VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_BUF_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_BUF_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT, "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT" },
      { VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT, "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT, "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT" },
      { VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT, "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT" },
      { VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT" },
      { VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT" },
      { VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT, "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT, "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV, "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR, "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR, "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE" },
      { VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE, "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM" },
      { VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM, "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV, "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV" },
      { VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV, "VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT, "VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM" },
      { VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM, "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT, "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT, "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG, "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG" },
      { VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG, "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT, "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV, "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV" },
      { VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV, "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV, "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV" },
      { VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV, "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR, "VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR" },
      { VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR, "VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR, "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR" },
      { VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR, "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR" },
      { VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR, "VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT" },
      { VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT" },
      { VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT" },
      { VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM" },
      { VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM, "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC" },
      { VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC, "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV, "VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV" },
      { VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV, "VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV" },
      { VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV, "VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT, "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR" },
      { VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM" },
      { VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM, "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT" },
      { VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX, "VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX" },
      { VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX, "VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX" },
      { VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX, "VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX" },
      { VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX, "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX" },
      { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX, "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSubpassContents
template<>
struct fmt::formatter<VkSubpassContents> : formatter<string_view>
{
  auto format(VkSubpassContents value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSubpassContents, std::string_view, 2> s_map =
    {
      { VK_SUBPASS_CONTENTS_INLINE, "VK_SUBPASS_CONTENTS_INLINE" },
      { VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS, "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkResult
template<>
struct fmt::formatter<VkResult> : formatter<string_view>
{
  auto format(VkResult value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkResult, std::string_view, 51> s_map =
    {
      { VK_SUCCESS, "VK_SUCCESS" },
      { VK_NOT_READY, "VK_NOT_READY" },
      { VK_TIMEOUT, "VK_TIMEOUT" },
      { VK_EVENT_SET, "VK_EVENT_SET" },
      { VK_EVENT_RESET, "VK_EVENT_RESET" },
      { VK_INCOMPLETE, "VK_INCOMPLETE" },
      { VK_ERROR_OUT_OF_HOST_MEMORY, "VK_ERROR_OUT_OF_HOST_MEMORY" },
      { VK_ERROR_OUT_OF_DEVICE_MEMORY, "VK_ERROR_OUT_OF_DEVICE_MEMORY" },
      { VK_ERROR_INITIALIZATION_FAILED, "VK_ERROR_INITIALIZATION_FAILED" },
      { VK_ERROR_DEVICE_LOST, "VK_ERROR_DEVICE_LOST" },
      { VK_ERROR_MEMORY_MAP_FAILED, "VK_ERROR_MEMORY_MAP_FAILED" },
      { VK_ERROR_LAYER_NOT_PRESENT, "VK_ERROR_LAYER_NOT_PRESENT" },
      { VK_ERROR_EXTENSION_NOT_PRESENT, "VK_ERROR_EXTENSION_NOT_PRESENT" },
      { VK_ERROR_FEATURE_NOT_PRESENT, "VK_ERROR_FEATURE_NOT_PRESENT" },
      { VK_ERROR_INCOMPATIBLE_DRIVER, "VK_ERROR_INCOMPATIBLE_DRIVER" },
      { VK_ERROR_TOO_MANY_OBJECTS, "VK_ERROR_TOO_MANY_OBJECTS" },
      { VK_ERROR_FORMAT_NOT_SUPPORTED, "VK_ERROR_FORMAT_NOT_SUPPORTED" },
      { VK_ERROR_FRAGMENTED_POOL, "VK_ERROR_FRAGMENTED_POOL" },
      { VK_ERROR_UNKNOWN, "VK_ERROR_UNKNOWN" },
      { VK_ERROR_SURFACE_LOST_KHR, "VK_ERROR_SURFACE_LOST_KHR" },
      { VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" },
      { VK_SUBOPTIMAL_KHR, "VK_SUBOPTIMAL_KHR" },
      { VK_ERROR_OUT_OF_DATE_KHR, "VK_ERROR_OUT_OF_DATE_KHR" },
      { VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR" },
      { VK_ERROR_VALIDATION_FAILED_EXT, "VK_ERROR_VALIDATION_FAILED_EXT" },
      { VK_ERROR_VALIDATION_FAILED_EXT, "VK_ERROR_VALIDATION_FAILED_EXT" },
      { VK_ERROR_INVALID_SHADER_NV, "VK_ERROR_INVALID_SHADER_NV" },
      { VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR" },
      { VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR" },
      { VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR" },
      { VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR" },
      { VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR" },
      { VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR" },
      { VK_ERROR_OUT_OF_POOL_MEMORY_KHR, "VK_ERROR_OUT_OF_POOL_MEMORY_KHR" },
      { VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR, "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" },
      { VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT" },
      { VK_ERROR_FRAGMENTATION_EXT, "VK_ERROR_FRAGMENTATION_EXT" },
      { VK_ERROR_NOT_PERMITTED_EXT, "VK_ERROR_NOT_PERMITTED_EXT" },
      { VK_ERROR_NOT_PERMITTED_KHR, "VK_ERROR_NOT_PERMITTED_KHR" },
      { VK_ERROR_INVALID_DEVICE_ADDRESS_EXT, "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT" },
      { VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT" },
      { VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR, "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR" },
      { VK_THREAD_IDLE_KHR, "VK_THREAD_IDLE_KHR" },
      { VK_THREAD_DONE_KHR, "VK_THREAD_DONE_KHR" },
      { VK_OPERATION_DEFERRED_KHR, "VK_OPERATION_DEFERRED_KHR" },
      { VK_OPERATION_NOT_DEFERRED_KHR, "VK_OPERATION_NOT_DEFERRED_KHR" },
      { VK_PIPELINE_COMPILE_REQUIRED_EXT, "VK_PIPELINE_COMPILE_REQUIRED_EXT" },
      { VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT, "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT" },
      { VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR, "VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR" },
      { VK_ERROR_COMPRESSION_EXHAUSTED_EXT, "VK_ERROR_COMPRESSION_EXHAUSTED_EXT" },
      { VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT, "VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDynamicState
template<>
struct fmt::formatter<VkDynamicState> : formatter<string_view>
{
  auto format(VkDynamicState value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDynamicState, std::string_view, 72> s_map =
    {
      { VK_DYNAMIC_STATE_VIEWPORT, "VK_DYNAMIC_STATE_VIEWPORT" },
      { VK_DYNAMIC_STATE_SCISSOR, "VK_DYNAMIC_STATE_SCISSOR" },
      { VK_DYNAMIC_STATE_LINE_WIDTH, "VK_DYNAMIC_STATE_LINE_WIDTH" },
      { VK_DYNAMIC_STATE_DEPTH_BIAS, "VK_DYNAMIC_STATE_DEPTH_BIAS" },
      { VK_DYNAMIC_STATE_BLEND_CONSTANTS, "VK_DYNAMIC_STATE_BLEND_CONSTANTS" },
      { VK_DYNAMIC_STATE_DEPTH_BOUNDS, "VK_DYNAMIC_STATE_DEPTH_BOUNDS" },
      { VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK, "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK" },
      { VK_DYNAMIC_STATE_STENCIL_WRITE_MASK, "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK" },
      { VK_DYNAMIC_STATE_STENCIL_REFERENCE, "VK_DYNAMIC_STATE_STENCIL_REFERENCE" },
      { VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV" },
      { VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT, "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT" },
      { VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT, "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT, "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT" },
      { VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT" },
      { VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR, "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR" },
      { VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV, "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV" },
      { VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV, "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV" },
      { VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV, "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV" },
      { VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV, "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV" },
      { VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR, "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR" },
      { VK_DYNAMIC_STATE_LINE_STIPPLE_EXT, "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT" },
      { VK_DYNAMIC_STATE_CULL_MODE_EXT, "VK_DYNAMIC_STATE_CULL_MODE_EXT" },
      { VK_DYNAMIC_STATE_FRONT_FACE_EXT, "VK_DYNAMIC_STATE_FRONT_FACE_EXT" },
      { VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT" },
      { VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT, "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT" },
      { VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT, "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT" },
      { VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT, "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT, "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT, "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_STENCIL_OP_EXT, "VK_DYNAMIC_STATE_STENCIL_OP_EXT" },
      { VK_DYNAMIC_STATE_VERTEX_INPUT_EXT, "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT" },
      { VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT" },
      { VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_LOGIC_OP_EXT, "VK_DYNAMIC_STATE_LOGIC_OP_EXT" },
      { VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT, "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT, "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT, "VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_POLYGON_MODE_EXT, "VK_DYNAMIC_STATE_POLYGON_MODE_EXT" },
      { VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT, "VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT" },
      { VK_DYNAMIC_STATE_SAMPLE_MASK_EXT, "VK_DYNAMIC_STATE_SAMPLE_MASK_EXT" },
      { VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT, "VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT, "VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT, "VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT, "VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT, "VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT" },
      { VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT, "VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT" },
      { VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT, "VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT" },
      { VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT, "VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT" },
      { VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT, "VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT, "VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT, "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT, "VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT" },
      { VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT, "VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT" },
      { VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT, "VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT" },
      { VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT, "VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT" },
      { VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT, "VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT" },
      { VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV, "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV" },
      { VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV, "VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV, "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV, "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV, "VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV, "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV, "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV" },
      { VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV, "VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV" },
      { VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV, "VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV" },
      { VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV, "VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV" },
      { VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT, "VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDescriptorUpdateTemplateType
template<>
struct fmt::formatter<VkDescriptorUpdateTemplateType> : formatter<string_view>
{
  auto format(VkDescriptorUpdateTemplateType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDescriptorUpdateTemplateType, std::string_view, 5> s_map =
    {
      { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET" },
      { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" },
      { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" },
      { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR, "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR" },
      { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkObjectType
template<>
struct fmt::formatter<VkObjectType> : formatter<string_view>
{
  auto format(VkObjectType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkObjectType, std::string_view, 50> s_map =
    {
      { VK_OBJECT_TYPE_UNKNOWN, "VK_OBJECT_TYPE_UNKNOWN" },
      { VK_OBJECT_TYPE_INSTANCE, "VK_OBJECT_TYPE_INSTANCE" },
      { VK_OBJECT_TYPE_PHYSICAL_DEVICE, "VK_OBJECT_TYPE_PHYSICAL_DEVICE" },
      { VK_OBJECT_TYPE_DEVICE, "VK_OBJECT_TYPE_DEVICE" },
      { VK_OBJECT_TYPE_QUEUE, "VK_OBJECT_TYPE_QUEUE" },
      { VK_OBJECT_TYPE_SEMAPHORE, "VK_OBJECT_TYPE_SEMAPHORE" },
      { VK_OBJECT_TYPE_COMMAND_BUFFER, "VK_OBJECT_TYPE_COMMAND_BUFFER" },
      { VK_OBJECT_TYPE_FENCE, "VK_OBJECT_TYPE_FENCE" },
      { VK_OBJECT_TYPE_DEVICE_MEMORY, "VK_OBJECT_TYPE_DEVICE_MEMORY" },
      { VK_OBJECT_TYPE_BUFFER, "VK_OBJECT_TYPE_BUFFER" },
      { VK_OBJECT_TYPE_IMAGE, "VK_OBJECT_TYPE_IMAGE" },
      { VK_OBJECT_TYPE_EVENT, "VK_OBJECT_TYPE_EVENT" },
      { VK_OBJECT_TYPE_QUERY_POOL, "VK_OBJECT_TYPE_QUERY_POOL" },
      { VK_OBJECT_TYPE_BUFFER_VIEW, "VK_OBJECT_TYPE_BUFFER_VIEW" },
      { VK_OBJECT_TYPE_IMAGE_VIEW, "VK_OBJECT_TYPE_IMAGE_VIEW" },
      { VK_OBJECT_TYPE_SHADER_MODULE, "VK_OBJECT_TYPE_SHADER_MODULE" },
      { VK_OBJECT_TYPE_PIPELINE_CACHE, "VK_OBJECT_TYPE_PIPELINE_CACHE" },
      { VK_OBJECT_TYPE_PIPELINE_LAYOUT, "VK_OBJECT_TYPE_PIPELINE_LAYOUT" },
      { VK_OBJECT_TYPE_RENDER_PASS, "VK_OBJECT_TYPE_RENDER_PASS" },
      { VK_OBJECT_TYPE_PIPELINE, "VK_OBJECT_TYPE_PIPELINE" },
      { VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT, "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT" },
      { VK_OBJECT_TYPE_SAMPLER, "VK_OBJECT_TYPE_SAMPLER" },
      { VK_OBJECT_TYPE_DESCRIPTOR_POOL, "VK_OBJECT_TYPE_DESCRIPTOR_POOL" },
      { VK_OBJECT_TYPE_DESCRIPTOR_SET, "VK_OBJECT_TYPE_DESCRIPTOR_SET" },
      { VK_OBJECT_TYPE_FRAMEBUFFER, "VK_OBJECT_TYPE_FRAMEBUFFER" },
      { VK_OBJECT_TYPE_COMMAND_POOL, "VK_OBJECT_TYPE_COMMAND_POOL" },
      { VK_OBJECT_TYPE_SURFACE_KHR, "VK_OBJECT_TYPE_SURFACE_KHR" },
      { VK_OBJECT_TYPE_SWAPCHAIN_KHR, "VK_OBJECT_TYPE_SWAPCHAIN_KHR" },
      { VK_OBJECT_TYPE_DISPLAY_KHR, "VK_OBJECT_TYPE_DISPLAY_KHR" },
      { VK_OBJECT_TYPE_DISPLAY_MODE_KHR, "VK_OBJECT_TYPE_DISPLAY_MODE_KHR" },
      { VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT, "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT" },
      { VK_OBJECT_TYPE_VIDEO_SESSION_KHR, "VK_OBJECT_TYPE_VIDEO_SESSION_KHR" },
      { VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR, "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR" },
      { VK_OBJECT_TYPE_CU_MODULE_NVX, "VK_OBJECT_TYPE_CU_MODULE_NVX" },
      { VK_OBJECT_TYPE_CU_FUNCTION_NVX, "VK_OBJECT_TYPE_CU_FUNCTION_NVX" },
      { VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR, "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR" },
      { VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT, "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT" },
      { VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR, "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR" },
      { VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR, "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR" },
      { VK_OBJECT_TYPE_VALIDATION_CACHE_EXT, "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT" },
      { VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV, "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV" },
      { VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL, "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL" },
      { VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR, "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR" },
      { VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV, "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV" },
      { VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT, "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT" },
      { VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA, "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA" },
      { VK_OBJECT_TYPE_MICROMAP_EXT, "VK_OBJECT_TYPE_MICROMAP_EXT" },
      { VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV, "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV" },
      { VK_OBJECT_TYPE_SHADER_EXT, "VK_OBJECT_TYPE_SHADER_EXT" },
      { VK_OBJECT_TYPE_SEMAPHORE_SCI_SYNC_POOL_NV, "VK_OBJECT_TYPE_SEMAPHORE_SCI_SYNC_POOL_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkRayTracingInvocationReorderModeNV
template<>
struct fmt::formatter<VkRayTracingInvocationReorderModeNV> : formatter<string_view>
{
  auto format(VkRayTracingInvocationReorderModeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkRayTracingInvocationReorderModeNV, std::string_view, 2> s_map =
    {
      { VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV, "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV" },
      { VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV, "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDirectDriverLoadingModeLUNARG
template<>
struct fmt::formatter<VkDirectDriverLoadingModeLUNARG> : formatter<string_view>
{
  auto format(VkDirectDriverLoadingModeLUNARG value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDirectDriverLoadingModeLUNARG, std::string_view, 2> s_map =
    {
      { VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG, "VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG" },
      { VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG, "VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSemaphoreType
template<>
struct fmt::formatter<VkSemaphoreType> : formatter<string_view>
{
  auto format(VkSemaphoreType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSemaphoreType, std::string_view, 4> s_map =
    {
      { VK_SEMAPHORE_TYPE_BINARY, "VK_SEMAPHORE_TYPE_BINARY" },
      { VK_SEMAPHORE_TYPE_TIMELINE, "VK_SEMAPHORE_TYPE_TIMELINE" },
      { VK_SEMAPHORE_TYPE_BINARY_KHR, "VK_SEMAPHORE_TYPE_BINARY_KHR" },
      { VK_SEMAPHORE_TYPE_TIMELINE_KHR, "VK_SEMAPHORE_TYPE_TIMELINE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPresentModeKHR
template<>
struct fmt::formatter<VkPresentModeKHR> : formatter<string_view>
{
  auto format(VkPresentModeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPresentModeKHR, std::string_view, 6> s_map =
    {
      { VK_PRESENT_MODE_IMMEDIATE_KHR, "VK_PRESENT_MODE_IMMEDIATE_KHR" },
      { VK_PRESENT_MODE_MAILBOX_KHR, "VK_PRESENT_MODE_MAILBOX_KHR" },
      { VK_PRESENT_MODE_FIFO_KHR, "VK_PRESENT_MODE_FIFO_KHR" },
      { VK_PRESENT_MODE_FIFO_RELAXED_KHR, "VK_PRESENT_MODE_FIFO_RELAXED_KHR" },
      { VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR, "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR" },
      { VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkColorSpaceKHR
template<>
struct fmt::formatter<VkColorSpaceKHR> : formatter<string_view>
{
  auto format(VkColorSpaceKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkColorSpaceKHR, std::string_view, 18> s_map =
    {
      { VK_COLOR_SPACE_SRGB_NONLINEAR_KHR, "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR" },
      { VK_COLORSPACE_SRGB_NONLINEAR_KHR, "VK_COLORSPACE_SRGB_NONLINEAR_KHR" },
      { VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT, "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT" },
      { VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT, "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT" },
      { VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT, "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT" },
      { VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT, "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT" },
      { VK_COLOR_SPACE_BT709_LINEAR_EXT, "VK_COLOR_SPACE_BT709_LINEAR_EXT" },
      { VK_COLOR_SPACE_BT709_NONLINEAR_EXT, "VK_COLOR_SPACE_BT709_NONLINEAR_EXT" },
      { VK_COLOR_SPACE_BT2020_LINEAR_EXT, "VK_COLOR_SPACE_BT2020_LINEAR_EXT" },
      { VK_COLOR_SPACE_HDR10_ST2084_EXT, "VK_COLOR_SPACE_HDR10_ST2084_EXT" },
      { VK_COLOR_SPACE_DOLBYVISION_EXT, "VK_COLOR_SPACE_DOLBYVISION_EXT" },
      { VK_COLOR_SPACE_HDR10_HLG_EXT, "VK_COLOR_SPACE_HDR10_HLG_EXT" },
      { VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT, "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT" },
      { VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT, "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT" },
      { VK_COLOR_SPACE_PASS_THROUGH_EXT, "VK_COLOR_SPACE_PASS_THROUGH_EXT" },
      { VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT, "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT" },
      { VK_COLOR_SPACE_DCI_P3_LINEAR_EXT, "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT" },
      { VK_COLOR_SPACE_DISPLAY_NATIVE_AMD, "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkTimeDomainEXT
template<>
struct fmt::formatter<VkTimeDomainEXT> : formatter<string_view>
{
  auto format(VkTimeDomainEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkTimeDomainEXT, std::string_view, 4> s_map =
    {
      { VK_TIME_DOMAIN_DEVICE_EXT, "VK_TIME_DOMAIN_DEVICE_EXT" },
      { VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT, "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT" },
      { VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT, "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT" },
      { VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT, "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDebugReportObjectTypeEXT
template<>
struct fmt::formatter<VkDebugReportObjectTypeEXT> : formatter<string_view>
{
  auto format(VkDebugReportObjectTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDebugReportObjectTypeEXT, std::string_view, 44> s_map =
    {
      { VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT" },
      { VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT, "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDeviceMemoryReportEventTypeEXT
template<>
struct fmt::formatter<VkDeviceMemoryReportEventTypeEXT> : formatter<string_view>
{
  auto format(VkDeviceMemoryReportEventTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDeviceMemoryReportEventTypeEXT, std::string_view, 5> s_map =
    {
      { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT" },
      { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT" },
      { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT" },
      { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT" },
      { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkRasterizationOrderAMD
template<>
struct fmt::formatter<VkRasterizationOrderAMD> : formatter<string_view>
{
  auto format(VkRasterizationOrderAMD value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkRasterizationOrderAMD, std::string_view, 2> s_map =
    {
      { VK_RASTERIZATION_ORDER_STRICT_AMD, "VK_RASTERIZATION_ORDER_STRICT_AMD" },
      { VK_RASTERIZATION_ORDER_RELAXED_AMD, "VK_RASTERIZATION_ORDER_RELAXED_AMD" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkValidationCheckEXT
template<>
struct fmt::formatter<VkValidationCheckEXT> : formatter<string_view>
{
  auto format(VkValidationCheckEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkValidationCheckEXT, std::string_view, 2> s_map =
    {
      { VK_VALIDATION_CHECK_ALL_EXT, "VK_VALIDATION_CHECK_ALL_EXT" },
      { VK_VALIDATION_CHECK_SHADERS_EXT, "VK_VALIDATION_CHECK_SHADERS_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkValidationFeatureEnableEXT
template<>
struct fmt::formatter<VkValidationFeatureEnableEXT> : formatter<string_view>
{
  auto format(VkValidationFeatureEnableEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkValidationFeatureEnableEXT, std::string_view, 5> s_map =
    {
      { VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT, "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT" },
      { VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT, "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT" },
      { VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT, "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT" },
      { VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT, "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT" },
      { VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT, "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkValidationFeatureDisableEXT
template<>
struct fmt::formatter<VkValidationFeatureDisableEXT> : formatter<string_view>
{
  auto format(VkValidationFeatureDisableEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkValidationFeatureDisableEXT, std::string_view, 8> s_map =
    {
      { VK_VALIDATION_FEATURE_DISABLE_ALL_EXT, "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT, "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT, "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT, "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT, "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT, "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT, "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT" },
      { VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT, "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkIndirectCommandsTokenTypeNV
template<>
struct fmt::formatter<VkIndirectCommandsTokenTypeNV> : formatter<string_view>
{
  auto format(VkIndirectCommandsTokenTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkIndirectCommandsTokenTypeNV, std::string_view, 11> s_map =
    {
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV" },
      { VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDisplayPowerStateEXT
template<>
struct fmt::formatter<VkDisplayPowerStateEXT> : formatter<string_view>
{
  auto format(VkDisplayPowerStateEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDisplayPowerStateEXT, std::string_view, 3> s_map =
    {
      { VK_DISPLAY_POWER_STATE_OFF_EXT, "VK_DISPLAY_POWER_STATE_OFF_EXT" },
      { VK_DISPLAY_POWER_STATE_SUSPEND_EXT, "VK_DISPLAY_POWER_STATE_SUSPEND_EXT" },
      { VK_DISPLAY_POWER_STATE_ON_EXT, "VK_DISPLAY_POWER_STATE_ON_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDeviceEventTypeEXT
template<>
struct fmt::formatter<VkDeviceEventTypeEXT> : formatter<string_view>
{
  auto format(VkDeviceEventTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDeviceEventTypeEXT, std::string_view, 1> s_map =
    {
      { VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT, "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDisplayEventTypeEXT
template<>
struct fmt::formatter<VkDisplayEventTypeEXT> : formatter<string_view>
{
  auto format(VkDisplayEventTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDisplayEventTypeEXT, std::string_view, 1> s_map =
    {
      { VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT, "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkViewportCoordinateSwizzleNV
template<>
struct fmt::formatter<VkViewportCoordinateSwizzleNV> : formatter<string_view>
{
  auto format(VkViewportCoordinateSwizzleNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkViewportCoordinateSwizzleNV, std::string_view, 8> s_map =
    {
      { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV" },
      { VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV, "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDiscardRectangleModeEXT
template<>
struct fmt::formatter<VkDiscardRectangleModeEXT> : formatter<string_view>
{
  auto format(VkDiscardRectangleModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDiscardRectangleModeEXT, std::string_view, 2> s_map =
    {
      { VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT, "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT" },
      { VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT, "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPointClippingBehavior
template<>
struct fmt::formatter<VkPointClippingBehavior> : formatter<string_view>
{
  auto format(VkPointClippingBehavior value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPointClippingBehavior, std::string_view, 4> s_map =
    {
      { VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES, "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES" },
      { VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY, "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY" },
      { VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR, "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR" },
      { VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR, "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSamplerReductionMode
template<>
struct fmt::formatter<VkSamplerReductionMode> : formatter<string_view>
{
  auto format(VkSamplerReductionMode value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSamplerReductionMode, std::string_view, 6> s_map =
    {
      { VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE, "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE" },
      { VK_SAMPLER_REDUCTION_MODE_MIN, "VK_SAMPLER_REDUCTION_MODE_MIN" },
      { VK_SAMPLER_REDUCTION_MODE_MAX, "VK_SAMPLER_REDUCTION_MODE_MAX" },
      { VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT, "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT" },
      { VK_SAMPLER_REDUCTION_MODE_MIN_EXT, "VK_SAMPLER_REDUCTION_MODE_MIN_EXT" },
      { VK_SAMPLER_REDUCTION_MODE_MAX_EXT, "VK_SAMPLER_REDUCTION_MODE_MAX_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkTessellationDomainOrigin
template<>
struct fmt::formatter<VkTessellationDomainOrigin> : formatter<string_view>
{
  auto format(VkTessellationDomainOrigin value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkTessellationDomainOrigin, std::string_view, 4> s_map =
    {
      { VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT, "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT" },
      { VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT, "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT" },
      { VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR, "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR" },
      { VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR, "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSamplerYcbcrModelConversion
template<>
struct fmt::formatter<VkSamplerYcbcrModelConversion> : formatter<string_view>
{
  auto format(VkSamplerYcbcrModelConversion value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSamplerYcbcrModelConversion, std::string_view, 10> s_map =
    {
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR" },
      { VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR, "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSamplerYcbcrRange
template<>
struct fmt::formatter<VkSamplerYcbcrRange> : formatter<string_view>
{
  auto format(VkSamplerYcbcrRange value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSamplerYcbcrRange, std::string_view, 4> s_map =
    {
      { VK_SAMPLER_YCBCR_RANGE_ITU_FULL, "VK_SAMPLER_YCBCR_RANGE_ITU_FULL" },
      { VK_SAMPLER_YCBCR_RANGE_ITU_NARROW, "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW" },
      { VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR, "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR" },
      { VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR, "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkChromaLocation
template<>
struct fmt::formatter<VkChromaLocation> : formatter<string_view>
{
  auto format(VkChromaLocation value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkChromaLocation, std::string_view, 4> s_map =
    {
      { VK_CHROMA_LOCATION_COSITED_EVEN, "VK_CHROMA_LOCATION_COSITED_EVEN" },
      { VK_CHROMA_LOCATION_MIDPOINT, "VK_CHROMA_LOCATION_MIDPOINT" },
      { VK_CHROMA_LOCATION_COSITED_EVEN_KHR, "VK_CHROMA_LOCATION_COSITED_EVEN_KHR" },
      { VK_CHROMA_LOCATION_MIDPOINT_KHR, "VK_CHROMA_LOCATION_MIDPOINT_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBlendOverlapEXT
template<>
struct fmt::formatter<VkBlendOverlapEXT> : formatter<string_view>
{
  auto format(VkBlendOverlapEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBlendOverlapEXT, std::string_view, 3> s_map =
    {
      { VK_BLEND_OVERLAP_UNCORRELATED_EXT, "VK_BLEND_OVERLAP_UNCORRELATED_EXT" },
      { VK_BLEND_OVERLAP_DISJOINT_EXT, "VK_BLEND_OVERLAP_DISJOINT_EXT" },
      { VK_BLEND_OVERLAP_CONJOINT_EXT, "VK_BLEND_OVERLAP_CONJOINT_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCoverageModulationModeNV
template<>
struct fmt::formatter<VkCoverageModulationModeNV> : formatter<string_view>
{
  auto format(VkCoverageModulationModeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCoverageModulationModeNV, std::string_view, 4> s_map =
    {
      { VK_COVERAGE_MODULATION_MODE_NONE_NV, "VK_COVERAGE_MODULATION_MODE_NONE_NV" },
      { VK_COVERAGE_MODULATION_MODE_RGB_NV, "VK_COVERAGE_MODULATION_MODE_RGB_NV" },
      { VK_COVERAGE_MODULATION_MODE_ALPHA_NV, "VK_COVERAGE_MODULATION_MODE_ALPHA_NV" },
      { VK_COVERAGE_MODULATION_MODE_RGBA_NV, "VK_COVERAGE_MODULATION_MODE_RGBA_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCoverageReductionModeNV
template<>
struct fmt::formatter<VkCoverageReductionModeNV> : formatter<string_view>
{
  auto format(VkCoverageReductionModeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCoverageReductionModeNV, std::string_view, 2> s_map =
    {
      { VK_COVERAGE_REDUCTION_MODE_MERGE_NV, "VK_COVERAGE_REDUCTION_MODE_MERGE_NV" },
      { VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV, "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkValidationCacheHeaderVersionEXT
template<>
struct fmt::formatter<VkValidationCacheHeaderVersionEXT> : formatter<string_view>
{
  auto format(VkValidationCacheHeaderVersionEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkValidationCacheHeaderVersionEXT, std::string_view, 1> s_map =
    {
      { VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT, "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkShaderInfoTypeAMD
template<>
struct fmt::formatter<VkShaderInfoTypeAMD> : formatter<string_view>
{
  auto format(VkShaderInfoTypeAMD value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkShaderInfoTypeAMD, std::string_view, 3> s_map =
    {
      { VK_SHADER_INFO_TYPE_STATISTICS_AMD, "VK_SHADER_INFO_TYPE_STATISTICS_AMD" },
      { VK_SHADER_INFO_TYPE_BINARY_AMD, "VK_SHADER_INFO_TYPE_BINARY_AMD" },
      { VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD, "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkQueueGlobalPriorityKHR
template<>
struct fmt::formatter<VkQueueGlobalPriorityKHR> : formatter<string_view>
{
  auto format(VkQueueGlobalPriorityKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkQueueGlobalPriorityKHR, std::string_view, 8> s_map =
    {
      { VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR, "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR" },
      { VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR, "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR" },
      { VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR, "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR" },
      { VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR, "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR" },
      { VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT, "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT" },
      { VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT, "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT" },
      { VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT, "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT" },
      { VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT, "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkConservativeRasterizationModeEXT
template<>
struct fmt::formatter<VkConservativeRasterizationModeEXT> : formatter<string_view>
{
  auto format(VkConservativeRasterizationModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkConservativeRasterizationModeEXT, std::string_view, 3> s_map =
    {
      { VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT, "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT" },
      { VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT, "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT" },
      { VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT, "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkVendorId
template<>
struct fmt::formatter<VkVendorId> : formatter<string_view>
{
  auto format(VkVendorId value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkVendorId, std::string_view, 7> s_map =
    {
      { VK_VENDOR_ID_VIV, "VK_VENDOR_ID_VIV" },
      { VK_VENDOR_ID_VSI, "VK_VENDOR_ID_VSI" },
      { VK_VENDOR_ID_KAZAN, "VK_VENDOR_ID_KAZAN" },
      { VK_VENDOR_ID_CODEPLAY, "VK_VENDOR_ID_CODEPLAY" },
      { VK_VENDOR_ID_MESA, "VK_VENDOR_ID_MESA" },
      { VK_VENDOR_ID_POCL, "VK_VENDOR_ID_POCL" },
      { VK_VENDOR_ID_MOBILEYE, "VK_VENDOR_ID_MOBILEYE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDriverId
template<>
struct fmt::formatter<VkDriverId> : formatter<string_view>
{
  auto format(VkDriverId value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDriverId, std::string_view, 37> s_map =
    {
      { VK_DRIVER_ID_AMD_PROPRIETARY, "VK_DRIVER_ID_AMD_PROPRIETARY" },
      { VK_DRIVER_ID_AMD_OPEN_SOURCE, "VK_DRIVER_ID_AMD_OPEN_SOURCE" },
      { VK_DRIVER_ID_MESA_RADV, "VK_DRIVER_ID_MESA_RADV" },
      { VK_DRIVER_ID_NVIDIA_PROPRIETARY, "VK_DRIVER_ID_NVIDIA_PROPRIETARY" },
      { VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS, "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS" },
      { VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA, "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA" },
      { VK_DRIVER_ID_IMAGINATION_PROPRIETARY, "VK_DRIVER_ID_IMAGINATION_PROPRIETARY" },
      { VK_DRIVER_ID_QUALCOMM_PROPRIETARY, "VK_DRIVER_ID_QUALCOMM_PROPRIETARY" },
      { VK_DRIVER_ID_ARM_PROPRIETARY, "VK_DRIVER_ID_ARM_PROPRIETARY" },
      { VK_DRIVER_ID_GOOGLE_SWIFTSHADER, "VK_DRIVER_ID_GOOGLE_SWIFTSHADER" },
      { VK_DRIVER_ID_GGP_PROPRIETARY, "VK_DRIVER_ID_GGP_PROPRIETARY" },
      { VK_DRIVER_ID_BROADCOM_PROPRIETARY, "VK_DRIVER_ID_BROADCOM_PROPRIETARY" },
      { VK_DRIVER_ID_MESA_LLVMPIPE, "VK_DRIVER_ID_MESA_LLVMPIPE" },
      { VK_DRIVER_ID_MOLTENVK, "VK_DRIVER_ID_MOLTENVK" },
      { VK_DRIVER_ID_COREAVI_PROPRIETARY, "VK_DRIVER_ID_COREAVI_PROPRIETARY" },
      { VK_DRIVER_ID_JUICE_PROPRIETARY, "VK_DRIVER_ID_JUICE_PROPRIETARY" },
      { VK_DRIVER_ID_VERISILICON_PROPRIETARY, "VK_DRIVER_ID_VERISILICON_PROPRIETARY" },
      { VK_DRIVER_ID_MESA_TURNIP, "VK_DRIVER_ID_MESA_TURNIP" },
      { VK_DRIVER_ID_MESA_V3DV, "VK_DRIVER_ID_MESA_V3DV" },
      { VK_DRIVER_ID_MESA_PANVK, "VK_DRIVER_ID_MESA_PANVK" },
      { VK_DRIVER_ID_SAMSUNG_PROPRIETARY, "VK_DRIVER_ID_SAMSUNG_PROPRIETARY" },
      { VK_DRIVER_ID_MESA_VENUS, "VK_DRIVER_ID_MESA_VENUS" },
      { VK_DRIVER_ID_MESA_DOZEN, "VK_DRIVER_ID_MESA_DOZEN" },
      { VK_DRIVER_ID_MESA_NVK, "VK_DRIVER_ID_MESA_NVK" },
      { VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA, "VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA" },
      { VK_DRIVER_ID_AMD_PROPRIETARY_KHR, "VK_DRIVER_ID_AMD_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR, "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR" },
      { VK_DRIVER_ID_MESA_RADV_KHR, "VK_DRIVER_ID_MESA_RADV_KHR" },
      { VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR, "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR, "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR" },
      { VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR, "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR" },
      { VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR, "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR, "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_ARM_PROPRIETARY_KHR, "VK_DRIVER_ID_ARM_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR, "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR" },
      { VK_DRIVER_ID_GGP_PROPRIETARY_KHR, "VK_DRIVER_ID_GGP_PROPRIETARY_KHR" },
      { VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR, "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkShadingRatePaletteEntryNV
template<>
struct fmt::formatter<VkShadingRatePaletteEntryNV> : formatter<string_view>
{
  auto format(VkShadingRatePaletteEntryNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkShadingRatePaletteEntryNV, std::string_view, 12> s_map =
    {
      { VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV, "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV, "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV, "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV, "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV" },
      { VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV, "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCoarseSampleOrderTypeNV
template<>
struct fmt::formatter<VkCoarseSampleOrderTypeNV> : formatter<string_view>
{
  auto format(VkCoarseSampleOrderTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCoarseSampleOrderTypeNV, std::string_view, 4> s_map =
    {
      { VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV, "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV" },
      { VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV" },
      { VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV, "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV" },
      { VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV, "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCopyAccelerationStructureModeKHR
template<>
struct fmt::formatter<VkCopyAccelerationStructureModeKHR> : formatter<string_view>
{
  auto format(VkCopyAccelerationStructureModeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCopyAccelerationStructureModeKHR, std::string_view, 6> s_map =
    {
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR, "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR" },
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR, "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR" },
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR, "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR" },
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR, "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR" },
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV, "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV" },
      { VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV, "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBuildAccelerationStructureModeKHR
template<>
struct fmt::formatter<VkBuildAccelerationStructureModeKHR> : formatter<string_view>
{
  auto format(VkBuildAccelerationStructureModeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBuildAccelerationStructureModeKHR, std::string_view, 2> s_map =
    {
      { VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR, "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR" },
      { VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAccelerationStructureTypeKHR
template<>
struct fmt::formatter<VkAccelerationStructureTypeKHR> : formatter<string_view>
{
  auto format(VkAccelerationStructureTypeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAccelerationStructureTypeKHR, std::string_view, 5> s_map =
    {
      { VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR, "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR" },
      { VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR, "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR" },
      { VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR, "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR" },
      { VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV, "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV" },
      { VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV, "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkGeometryTypeKHR
template<>
struct fmt::formatter<VkGeometryTypeKHR> : formatter<string_view>
{
  auto format(VkGeometryTypeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkGeometryTypeKHR, std::string_view, 5> s_map =
    {
      { VK_GEOMETRY_TYPE_TRIANGLES_KHR, "VK_GEOMETRY_TYPE_TRIANGLES_KHR" },
      { VK_GEOMETRY_TYPE_AABBS_KHR, "VK_GEOMETRY_TYPE_AABBS_KHR" },
      { VK_GEOMETRY_TYPE_INSTANCES_KHR, "VK_GEOMETRY_TYPE_INSTANCES_KHR" },
      { VK_GEOMETRY_TYPE_TRIANGLES_NV, "VK_GEOMETRY_TYPE_TRIANGLES_NV" },
      { VK_GEOMETRY_TYPE_AABBS_NV, "VK_GEOMETRY_TYPE_AABBS_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAccelerationStructureMemoryRequirementsTypeNV
template<>
struct fmt::formatter<VkAccelerationStructureMemoryRequirementsTypeNV> : formatter<string_view>
{
  auto format(VkAccelerationStructureMemoryRequirementsTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAccelerationStructureMemoryRequirementsTypeNV, std::string_view, 3> s_map =
    {
      { VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV, "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV" },
      { VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV, "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV" },
      { VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV, "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAccelerationStructureBuildTypeKHR
template<>
struct fmt::formatter<VkAccelerationStructureBuildTypeKHR> : formatter<string_view>
{
  auto format(VkAccelerationStructureBuildTypeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAccelerationStructureBuildTypeKHR, std::string_view, 3> s_map =
    {
      { VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR" },
      { VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR" },
      { VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkRayTracingShaderGroupTypeKHR
template<>
struct fmt::formatter<VkRayTracingShaderGroupTypeKHR> : formatter<string_view>
{
  auto format(VkRayTracingShaderGroupTypeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkRayTracingShaderGroupTypeKHR, std::string_view, 6> s_map =
    {
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR, "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR" },
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR, "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR" },
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR, "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR" },
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV, "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV" },
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV, "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV" },
      { VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV, "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAccelerationStructureCompatibilityKHR
template<>
struct fmt::formatter<VkAccelerationStructureCompatibilityKHR> : formatter<string_view>
{
  auto format(VkAccelerationStructureCompatibilityKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAccelerationStructureCompatibilityKHR, std::string_view, 2> s_map =
    {
      { VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR, "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR" },
      { VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR, "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkShaderGroupShaderKHR
template<>
struct fmt::formatter<VkShaderGroupShaderKHR> : formatter<string_view>
{
  auto format(VkShaderGroupShaderKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkShaderGroupShaderKHR, std::string_view, 4> s_map =
    {
      { VK_SHADER_GROUP_SHADER_GENERAL_KHR, "VK_SHADER_GROUP_SHADER_GENERAL_KHR" },
      { VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR, "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR" },
      { VK_SHADER_GROUP_SHADER_ANY_HIT_KHR, "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR" },
      { VK_SHADER_GROUP_SHADER_INTERSECTION_KHR, "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkMemoryOverallocationBehaviorAMD
template<>
struct fmt::formatter<VkMemoryOverallocationBehaviorAMD> : formatter<string_view>
{
  auto format(VkMemoryOverallocationBehaviorAMD value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkMemoryOverallocationBehaviorAMD, std::string_view, 3> s_map =
    {
      { VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD, "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD" },
      { VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD, "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD" },
      { VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD, "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFullScreenExclusiveEXT
template<>
struct fmt::formatter<VkFullScreenExclusiveEXT> : formatter<string_view>
{
  auto format(VkFullScreenExclusiveEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFullScreenExclusiveEXT, std::string_view, 4> s_map =
    {
      { VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT, "VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT" },
      { VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT, "VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT" },
      { VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT, "VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT" },
      { VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT, "VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceCounterScopeKHR
template<>
struct fmt::formatter<VkPerformanceCounterScopeKHR> : formatter<string_view>
{
  auto format(VkPerformanceCounterScopeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceCounterScopeKHR, std::string_view, 6> s_map =
    {
      { VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR, "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR" },
      { VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR, "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR" },
      { VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR, "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR" },
      { VK_QUERY_SCOPE_COMMAND_BUFFER_KHR, "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR" },
      { VK_QUERY_SCOPE_RENDER_PASS_KHR, "VK_QUERY_SCOPE_RENDER_PASS_KHR" },
      { VK_QUERY_SCOPE_COMMAND_KHR, "VK_QUERY_SCOPE_COMMAND_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceCounterUnitKHR
template<>
struct fmt::formatter<VkPerformanceCounterUnitKHR> : formatter<string_view>
{
  auto format(VkPerformanceCounterUnitKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceCounterUnitKHR, std::string_view, 11> s_map =
    {
      { VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR, "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR, "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR, "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR, "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR, "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR, "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR, "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR, "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR, "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR, "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR" },
      { VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR, "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceCounterStorageKHR
template<>
struct fmt::formatter<VkPerformanceCounterStorageKHR> : formatter<string_view>
{
  auto format(VkPerformanceCounterStorageKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceCounterStorageKHR, std::string_view, 6> s_map =
    {
      { VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR" },
      { VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR" },
      { VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR" },
      { VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR" },
      { VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR" },
      { VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR, "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceConfigurationTypeINTEL
template<>
struct fmt::formatter<VkPerformanceConfigurationTypeINTEL> : formatter<string_view>
{
  auto format(VkPerformanceConfigurationTypeINTEL value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceConfigurationTypeINTEL, std::string_view, 1> s_map =
    {
      { VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL, "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkQueryPoolSamplingModeINTEL
template<>
struct fmt::formatter<VkQueryPoolSamplingModeINTEL> : formatter<string_view>
{
  auto format(VkQueryPoolSamplingModeINTEL value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkQueryPoolSamplingModeINTEL, std::string_view, 1> s_map =
    {
      { VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL, "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceOverrideTypeINTEL
template<>
struct fmt::formatter<VkPerformanceOverrideTypeINTEL> : formatter<string_view>
{
  auto format(VkPerformanceOverrideTypeINTEL value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceOverrideTypeINTEL, std::string_view, 2> s_map =
    {
      { VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL, "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL" },
      { VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL, "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceParameterTypeINTEL
template<>
struct fmt::formatter<VkPerformanceParameterTypeINTEL> : formatter<string_view>
{
  auto format(VkPerformanceParameterTypeINTEL value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceParameterTypeINTEL, std::string_view, 2> s_map =
    {
      { VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL, "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL" },
      { VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL, "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPerformanceValueTypeINTEL
template<>
struct fmt::formatter<VkPerformanceValueTypeINTEL> : formatter<string_view>
{
  auto format(VkPerformanceValueTypeINTEL value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPerformanceValueTypeINTEL, std::string_view, 5> s_map =
    {
      { VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL, "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL" },
      { VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL, "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL" },
      { VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL, "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL" },
      { VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL, "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL" },
      { VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL, "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkShaderFloatControlsIndependence
template<>
struct fmt::formatter<VkShaderFloatControlsIndependence> : formatter<string_view>
{
  auto format(VkShaderFloatControlsIndependence value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkShaderFloatControlsIndependence, std::string_view, 6> s_map =
    {
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY" },
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL" },
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE" },
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR" },
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR" },
      { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR, "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineExecutableStatisticFormatKHR
template<>
struct fmt::formatter<VkPipelineExecutableStatisticFormatKHR> : formatter<string_view>
{
  auto format(VkPipelineExecutableStatisticFormatKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineExecutableStatisticFormatKHR, std::string_view, 4> s_map =
    {
      { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR, "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR" },
      { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR, "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR" },
      { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR, "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR" },
      { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR, "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkLineRasterizationModeEXT
template<>
struct fmt::formatter<VkLineRasterizationModeEXT> : formatter<string_view>
{
  auto format(VkLineRasterizationModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkLineRasterizationModeEXT, std::string_view, 4> s_map =
    {
      { VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT, "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT" },
      { VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT, "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT" },
      { VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT, "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT" },
      { VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT, "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFaultLevel
template<>
struct fmt::formatter<VkFaultLevel> : formatter<string_view>
{
  auto format(VkFaultLevel value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFaultLevel, std::string_view, 4> s_map =
    {
      { VK_FAULT_LEVEL_UNASSIGNED, "VK_FAULT_LEVEL_UNASSIGNED" },
      { VK_FAULT_LEVEL_CRITICAL, "VK_FAULT_LEVEL_CRITICAL" },
      { VK_FAULT_LEVEL_RECOVERABLE, "VK_FAULT_LEVEL_RECOVERABLE" },
      { VK_FAULT_LEVEL_WARNING, "VK_FAULT_LEVEL_WARNING" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFaultType
template<>
struct fmt::formatter<VkFaultType> : formatter<string_view>
{
  auto format(VkFaultType value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFaultType, std::string_view, 7> s_map =
    {
      { VK_FAULT_TYPE_INVALID, "VK_FAULT_TYPE_INVALID" },
      { VK_FAULT_TYPE_UNASSIGNED, "VK_FAULT_TYPE_UNASSIGNED" },
      { VK_FAULT_TYPE_IMPLEMENTATION, "VK_FAULT_TYPE_IMPLEMENTATION" },
      { VK_FAULT_TYPE_SYSTEM, "VK_FAULT_TYPE_SYSTEM" },
      { VK_FAULT_TYPE_PHYSICAL_DEVICE, "VK_FAULT_TYPE_PHYSICAL_DEVICE" },
      { VK_FAULT_TYPE_COMMAND_BUFFER_FULL, "VK_FAULT_TYPE_COMMAND_BUFFER_FULL" },
      { VK_FAULT_TYPE_INVALID_API_USAGE, "VK_FAULT_TYPE_INVALID_API_USAGE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFaultQueryBehavior
template<>
struct fmt::formatter<VkFaultQueryBehavior> : formatter<string_view>
{
  auto format(VkFaultQueryBehavior value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFaultQueryBehavior, std::string_view, 1> s_map =
    {
      { VK_FAULT_QUERY_BEHAVIOR_GET_AND_CLEAR_ALL_FAULTS, "VK_FAULT_QUERY_BEHAVIOR_GET_AND_CLEAR_ALL_FAULTS" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineMatchControl
template<>
struct fmt::formatter<VkPipelineMatchControl> : formatter<string_view>
{
  auto format(VkPipelineMatchControl value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineMatchControl, std::string_view, 1> s_map =
    {
      { VK_PIPELINE_MATCH_CONTROL_APPLICATION_UUID_EXACT_MATCH, "VK_PIPELINE_MATCH_CONTROL_APPLICATION_UUID_EXACT_MATCH" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFragmentShadingRateCombinerOpKHR
template<>
struct fmt::formatter<VkFragmentShadingRateCombinerOpKHR> : formatter<string_view>
{
  auto format(VkFragmentShadingRateCombinerOpKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFragmentShadingRateCombinerOpKHR, std::string_view, 5> s_map =
    {
      { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR, "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR" },
      { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR, "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR" },
      { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR, "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR" },
      { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR, "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR" },
      { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR, "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFragmentShadingRateNV
template<>
struct fmt::formatter<VkFragmentShadingRateNV> : formatter<string_view>
{
  auto format(VkFragmentShadingRateNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFragmentShadingRateNV, std::string_view, 12> s_map =
    {
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV" },
      { VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV, "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV" },
      { VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV, "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV" },
      { VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV, "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV" },
      { VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV, "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV" },
      { VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV, "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkFragmentShadingRateTypeNV
template<>
struct fmt::formatter<VkFragmentShadingRateTypeNV> : formatter<string_view>
{
  auto format(VkFragmentShadingRateTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkFragmentShadingRateTypeNV, std::string_view, 2> s_map =
    {
      { VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV, "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV" },
      { VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV, "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSubpassMergeStatusEXT
template<>
struct fmt::formatter<VkSubpassMergeStatusEXT> : formatter<string_view>
{
  auto format(VkSubpassMergeStatusEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSubpassMergeStatusEXT, std::string_view, 14> s_map =
    {
      { VK_SUBPASS_MERGE_STATUS_MERGED_EXT, "VK_SUBPASS_MERGE_STATUS_MERGED_EXT" },
      { VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT, "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT" },
      { VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSciSyncClientTypeNV
template<>
struct fmt::formatter<VkSciSyncClientTypeNV> : formatter<string_view>
{
  auto format(VkSciSyncClientTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSciSyncClientTypeNV, std::string_view, 3> s_map =
    {
      { VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_NV, "VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_NV" },
      { VK_SCI_SYNC_CLIENT_TYPE_WAITER_NV, "VK_SCI_SYNC_CLIENT_TYPE_WAITER_NV" },
      { VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_WAITER_NV, "VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_WAITER_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkSciSyncPrimitiveTypeNV
template<>
struct fmt::formatter<VkSciSyncPrimitiveTypeNV> : formatter<string_view>
{
  auto format(VkSciSyncPrimitiveTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkSciSyncPrimitiveTypeNV, std::string_view, 2> s_map =
    {
      { VK_SCI_SYNC_PRIMITIVE_TYPE_FENCE_NV, "VK_SCI_SYNC_PRIMITIVE_TYPE_FENCE_NV" },
      { VK_SCI_SYNC_PRIMITIVE_TYPE_SEMAPHORE_NV, "VK_SCI_SYNC_PRIMITIVE_TYPE_SEMAPHORE_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkProvokingVertexModeEXT
template<>
struct fmt::formatter<VkProvokingVertexModeEXT> : formatter<string_view>
{
  auto format(VkProvokingVertexModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkProvokingVertexModeEXT, std::string_view, 2> s_map =
    {
      { VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT, "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT" },
      { VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT, "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineCacheValidationVersion
template<>
struct fmt::formatter<VkPipelineCacheValidationVersion> : formatter<string_view>
{
  auto format(VkPipelineCacheValidationVersion value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineCacheValidationVersion, std::string_view, 1> s_map =
    {
      { VK_PIPELINE_CACHE_VALIDATION_VERSION_SAFETY_CRITICAL_ONE, "VK_PIPELINE_CACHE_VALIDATION_VERSION_SAFETY_CRITICAL_ONE" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkAccelerationStructureMotionInstanceTypeNV
template<>
struct fmt::formatter<VkAccelerationStructureMotionInstanceTypeNV> : formatter<string_view>
{
  auto format(VkAccelerationStructureMotionInstanceTypeNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkAccelerationStructureMotionInstanceTypeNV, std::string_view, 3> s_map =
    {
      { VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV" },
      { VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV" },
      { VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDeviceAddressBindingTypeEXT
template<>
struct fmt::formatter<VkDeviceAddressBindingTypeEXT> : formatter<string_view>
{
  auto format(VkDeviceAddressBindingTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDeviceAddressBindingTypeEXT, std::string_view, 2> s_map =
    {
      { VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT, "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT" },
      { VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT, "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkQueryResultStatusKHR
template<>
struct fmt::formatter<VkQueryResultStatusKHR> : formatter<string_view>
{
  auto format(VkQueryResultStatusKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkQueryResultStatusKHR, std::string_view, 3> s_map =
    {
      { VK_QUERY_RESULT_STATUS_ERROR_KHR, "VK_QUERY_RESULT_STATUS_ERROR_KHR" },
      { VK_QUERY_RESULT_STATUS_NOT_READY_KHR, "VK_QUERY_RESULT_STATUS_NOT_READY_KHR" },
      { VK_QUERY_RESULT_STATUS_COMPLETE_KHR, "VK_QUERY_RESULT_STATUS_COMPLETE_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkVideoEncodeTuningModeKHR
template<>
struct fmt::formatter<VkVideoEncodeTuningModeKHR> : formatter<string_view>
{
  auto format(VkVideoEncodeTuningModeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkVideoEncodeTuningModeKHR, std::string_view, 5> s_map =
    {
      { VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR, "VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR" },
      { VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR, "VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR" },
      { VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR, "VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR" },
      { VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR, "VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR" },
      { VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR, "VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineRobustnessBufferBehaviorEXT
template<>
struct fmt::formatter<VkPipelineRobustnessBufferBehaviorEXT> : formatter<string_view>
{
  auto format(VkPipelineRobustnessBufferBehaviorEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineRobustnessBufferBehaviorEXT, std::string_view, 4> s_map =
    {
      { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT, "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT" },
      { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT, "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT" },
      { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT, "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT" },
      { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT, "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkPipelineRobustnessImageBehaviorEXT
template<>
struct fmt::formatter<VkPipelineRobustnessImageBehaviorEXT> : formatter<string_view>
{
  auto format(VkPipelineRobustnessImageBehaviorEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkPipelineRobustnessImageBehaviorEXT, std::string_view, 4> s_map =
    {
      { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT, "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT" },
      { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT, "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT" },
      { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT, "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT" },
      { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT, "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkOpticalFlowPerformanceLevelNV
template<>
struct fmt::formatter<VkOpticalFlowPerformanceLevelNV> : formatter<string_view>
{
  auto format(VkOpticalFlowPerformanceLevelNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkOpticalFlowPerformanceLevelNV, std::string_view, 4> s_map =
    {
      { VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV" },
      { VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV" },
      { VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV" },
      { VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkOpticalFlowSessionBindingPointNV
template<>
struct fmt::formatter<VkOpticalFlowSessionBindingPointNV> : formatter<string_view>
{
  auto format(VkOpticalFlowSessionBindingPointNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkOpticalFlowSessionBindingPointNV, std::string_view, 9> s_map =
    {
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV" },
      { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkMicromapTypeEXT
template<>
struct fmt::formatter<VkMicromapTypeEXT> : formatter<string_view>
{
  auto format(VkMicromapTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkMicromapTypeEXT, std::string_view, 2> s_map =
    {
      { VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT, "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT" },
      { VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV, "VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkCopyMicromapModeEXT
template<>
struct fmt::formatter<VkCopyMicromapModeEXT> : formatter<string_view>
{
  auto format(VkCopyMicromapModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkCopyMicromapModeEXT, std::string_view, 4> s_map =
    {
      { VK_COPY_MICROMAP_MODE_CLONE_EXT, "VK_COPY_MICROMAP_MODE_CLONE_EXT" },
      { VK_COPY_MICROMAP_MODE_SERIALIZE_EXT, "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT" },
      { VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT, "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT" },
      { VK_COPY_MICROMAP_MODE_COMPACT_EXT, "VK_COPY_MICROMAP_MODE_COMPACT_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkBuildMicromapModeEXT
template<>
struct fmt::formatter<VkBuildMicromapModeEXT> : formatter<string_view>
{
  auto format(VkBuildMicromapModeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkBuildMicromapModeEXT, std::string_view, 1> s_map =
    {
      { VK_BUILD_MICROMAP_MODE_BUILD_EXT, "VK_BUILD_MICROMAP_MODE_BUILD_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkOpacityMicromapFormatEXT
template<>
struct fmt::formatter<VkOpacityMicromapFormatEXT> : formatter<string_view>
{
  auto format(VkOpacityMicromapFormatEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkOpacityMicromapFormatEXT, std::string_view, 2> s_map =
    {
      { VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT, "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT" },
      { VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT, "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkOpacityMicromapSpecialIndexEXT
template<>
struct fmt::formatter<VkOpacityMicromapSpecialIndexEXT> : formatter<string_view>
{
  auto format(VkOpacityMicromapSpecialIndexEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkOpacityMicromapSpecialIndexEXT, std::string_view, 4> s_map =
    {
      { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT" },
      { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT" },
      { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT" },
      { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDepthBiasRepresentationEXT
template<>
struct fmt::formatter<VkDepthBiasRepresentationEXT> : formatter<string_view>
{
  auto format(VkDepthBiasRepresentationEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDepthBiasRepresentationEXT, std::string_view, 3> s_map =
    {
      { VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT, "VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT" },
      { VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT, "VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT" },
      { VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT, "VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDeviceFaultAddressTypeEXT
template<>
struct fmt::formatter<VkDeviceFaultAddressTypeEXT> : formatter<string_view>
{
  auto format(VkDeviceFaultAddressTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDeviceFaultAddressTypeEXT, std::string_view, 7> s_map =
    {
      { VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT" },
      { VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDeviceFaultVendorBinaryHeaderVersionEXT
template<>
struct fmt::formatter<VkDeviceFaultVendorBinaryHeaderVersionEXT> : formatter<string_view>
{
  auto format(VkDeviceFaultVendorBinaryHeaderVersionEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDeviceFaultVendorBinaryHeaderVersionEXT, std::string_view, 1> s_map =
    {
      { VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT, "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkDisplacementMicromapFormatNV
template<>
struct fmt::formatter<VkDisplacementMicromapFormatNV> : formatter<string_view>
{
  auto format(VkDisplacementMicromapFormatNV value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkDisplacementMicromapFormatNV, std::string_view, 3> s_map =
    {
      { VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV, "VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV" },
      { VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV, "VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV" },
      { VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV, "VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkShaderCodeTypeEXT
template<>
struct fmt::formatter<VkShaderCodeTypeEXT> : formatter<string_view>
{
  auto format(VkShaderCodeTypeEXT value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkShaderCodeTypeEXT, std::string_view, 2> s_map =
    {
      { VK_SHADER_CODE_TYPE_BINARY_EXT, "VK_SHADER_CODE_TYPE_BINARY_EXT" },
      { VK_SHADER_CODE_TYPE_SPIRV_EXT, "VK_SHADER_CODE_TYPE_SPIRV_EXT" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkScopeKHR
template<>
struct fmt::formatter<VkScopeKHR> : formatter<string_view>
{
  auto format(VkScopeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkScopeKHR, std::string_view, 8> s_map =
    {
      { VK_SCOPE_DEVICE_KHR, "VK_SCOPE_DEVICE_KHR" },
      { VK_SCOPE_WORKGROUP_KHR, "VK_SCOPE_WORKGROUP_KHR" },
      { VK_SCOPE_SUBGROUP_KHR, "VK_SCOPE_SUBGROUP_KHR" },
      { VK_SCOPE_QUEUE_FAMILY_KHR, "VK_SCOPE_QUEUE_FAMILY_KHR" },
      { VK_SCOPE_DEVICE_NV, "VK_SCOPE_DEVICE_NV" },
      { VK_SCOPE_WORKGROUP_NV, "VK_SCOPE_WORKGROUP_NV" },
      { VK_SCOPE_SUBGROUP_NV, "VK_SCOPE_SUBGROUP_NV" },
      { VK_SCOPE_QUEUE_FAMILY_NV, "VK_SCOPE_QUEUE_FAMILY_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

// VkComponentTypeKHR
template<>
struct fmt::formatter<VkComponentTypeKHR> : formatter<string_view>
{
  auto format(VkComponentTypeKHR value, format_context& ctx) const -> decltype(ctx.out())
  {
    static constexpr common::dictionary<VkComponentTypeKHR, std::string_view, 22> s_map =
    {
      { VK_COMPONENT_TYPE_FLOAT16_KHR, "VK_COMPONENT_TYPE_FLOAT16_KHR" },
      { VK_COMPONENT_TYPE_FLOAT32_KHR, "VK_COMPONENT_TYPE_FLOAT32_KHR" },
      { VK_COMPONENT_TYPE_FLOAT64_KHR, "VK_COMPONENT_TYPE_FLOAT64_KHR" },
      { VK_COMPONENT_TYPE_SINT8_KHR, "VK_COMPONENT_TYPE_SINT8_KHR" },
      { VK_COMPONENT_TYPE_SINT16_KHR, "VK_COMPONENT_TYPE_SINT16_KHR" },
      { VK_COMPONENT_TYPE_SINT32_KHR, "VK_COMPONENT_TYPE_SINT32_KHR" },
      { VK_COMPONENT_TYPE_SINT64_KHR, "VK_COMPONENT_TYPE_SINT64_KHR" },
      { VK_COMPONENT_TYPE_UINT8_KHR, "VK_COMPONENT_TYPE_UINT8_KHR" },
      { VK_COMPONENT_TYPE_UINT16_KHR, "VK_COMPONENT_TYPE_UINT16_KHR" },
      { VK_COMPONENT_TYPE_UINT32_KHR, "VK_COMPONENT_TYPE_UINT32_KHR" },
      { VK_COMPONENT_TYPE_UINT64_KHR, "VK_COMPONENT_TYPE_UINT64_KHR" },
      { VK_COMPONENT_TYPE_FLOAT16_NV, "VK_COMPONENT_TYPE_FLOAT16_NV" },
      { VK_COMPONENT_TYPE_FLOAT32_NV, "VK_COMPONENT_TYPE_FLOAT32_NV" },
      { VK_COMPONENT_TYPE_FLOAT64_NV, "VK_COMPONENT_TYPE_FLOAT64_NV" },
      { VK_COMPONENT_TYPE_SINT8_NV, "VK_COMPONENT_TYPE_SINT8_NV" },
      { VK_COMPONENT_TYPE_SINT16_NV, "VK_COMPONENT_TYPE_SINT16_NV" },
      { VK_COMPONENT_TYPE_SINT32_NV, "VK_COMPONENT_TYPE_SINT32_NV" },
      { VK_COMPONENT_TYPE_SINT64_NV, "VK_COMPONENT_TYPE_SINT64_NV" },
      { VK_COMPONENT_TYPE_UINT8_NV, "VK_COMPONENT_TYPE_UINT8_NV" },
      { VK_COMPONENT_TYPE_UINT16_NV, "VK_COMPONENT_TYPE_UINT16_NV" },
      { VK_COMPONENT_TYPE_UINT32_NV, "VK_COMPONENT_TYPE_UINT32_NV" },
      { VK_COMPONENT_TYPE_UINT64_NV, "VK_COMPONENT_TYPE_UINT64_NV" },
    };

    return fmt::format_to(ctx.out(), "{}", s_map.find_or_panic(value));
  }
};

