name: PR Build Checks

on:
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_PATH: .
  CONFIG: Release

permissions:
  contents: read

jobs:
  windows-latest-msbuild-msvc:
    name: "Windows Solution Build"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.PROJECT_PATH}}
      run: nuget restore ${{env.PROJECT_PATH}}

    - name: Build
      working-directory: ${{env.PROJECT_PATH}}
      run: msbuild /m /p:Configuration=${{env.CONFIG}} ${{env.PROJECT_PATH}}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: "windows-x64-msbuild"
        path: "bin"

  windows-latest-cmake-ninja-msvc:
    name: "Windows CMAKE Ninja Build"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Generate
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake.exe -DCMAKE_BUILD_TYPE=${{env.CONFIG}} -S. -B./build -G "Visual Studio 17 2022"

    - name: Build
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake.exe --build ./build --config ${{env.CONFIG}}

  windows-latest-cmake-msbuild-msvc:
    name: "Windows CMAKE Solution Build"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Generate
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake.exe -DCMAKE_BUILD_TYPE=${{env.CONFIG}} -S. -B./build -G Ninja

    - name: Build
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake.exe --build ./build --config ${{env.CONFIG}}

  ubuntu-latest-cmake-ninja-clang16:
    name: "Linux Clang Build"
    runs-on: ubuntu-latest
    env:
      CC: clang-16
      CXX: clang++-16

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Update Apt Package List
      run: sudo apt-get update

    - name: Purge Clang
      run: sudo apt remove -y clang-13 clang-14

    - name: Setup And Install LLVM 16
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 16

    - name: Install Ninja
      run: sudo apt-get install -y ninja-build

    - name: Generate
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake -DCMAKE_BUILD_TYPE=${{env.CONFIG}} -S. -B./build -G Ninja

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake --build ./build --config ${{env.CONFIG}}

  ubuntu-latest-cmake-ninja-gcc11:
    name: "Linux GCC Build"
    runs-on: ubuntu-latest
    env:
      CC: gcc-11
      CXX: g++-11

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Update Apt Package List
      run: sudo apt update

    - name: Install Dependencies
      run: sudo apt install -y gcc-11 ninja-build

    - name: Generate
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake -DCMAKE_BUILD_TYPE=${{env.CONFIG}} -S. -B./build -G Ninja

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cmake --build ./build --config ${{env.CONFIG}}
